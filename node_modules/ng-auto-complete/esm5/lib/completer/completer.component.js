/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { debounceTime } from 'rxjs/operators';
import { Component, EventEmitter, Input, NgZone, Output, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { AutocompleteGroup } from '../classes/AutocompleteGroup';
import { ComparableAutoCompleteString, SearchableAutoCompleteString } from '../classes/AutocompleteItem';
import { NgDropdownDirective } from '../dropdown/ng-dropdown.directive';
import { Subject } from 'rxjs';
var CompleterComponent = /** @class */ (function () {
    function CompleterComponent(_zone, cd) {
        this._zone = _zone;
        this.cd = cd;
        this.cleared = new EventEmitter();
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = (/** @type {?} */ ({}));
        this._change = new Subject();
        this._items = {};
        this._completer = '';
        this._highlight = '';
        this._disabled = false;
        this._DOM = {
            notFound: (/** @type {?} */ (false)),
            empty: (/** @type {?} */ (false)),
            placeholder: (/** @type {?} */ (null)),
            selected: (/** @type {?} */ ('')),
            isLoading: (/** @type {?} */ (false))
        };
    }
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ngOnInit = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            _this._change.pipe(debounceTime(300))
                .subscribe(function (value) {
                _this._zone.run(function () {
                    if (_this.group.async !== null) {
                        _this.RunAsyncFunction(value);
                    }
                    else {
                        _this.OnModelChange(value);
                    }
                    _this.cd.detectChanges();
                });
            });
        });
        this.SetItems();
    };
    /**
     * Only used when completion is off.
     */
    /**
     * Only used when completion is off.
     * @return {?}
     */
    CompleterComponent.prototype.RegisterClick = /**
     * Only used when completion is off.
     * @return {?}
     */
    function () {
        if (!this.group.completion) {
            this.SwitchDropdownState();
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.DropdownArray = /**
     *
     * @return {?}
     */
    function () {
        if (this.group.completion) {
            this.SwitchDropdownState();
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.SwitchDropdownState = /**
     *
     * @return {?}
     */
    function () {
        if (this.dropdown._open) {
            this.CloseDropdown();
            return;
        }
        /**
         *
         */
        this.OpenDropdown();
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.CloseDropdown = /**
     *
     * @return {?}
     */
    function () {
        this.dropdown._open = false;
        /**
         *
         */
        this._DOM.placeholder = null;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.OpenDropdown = /**
     *
     * @return {?}
     */
    function () {
        this.dropdown.Open();
        /**
         *
         */
        this._DOM.placeholder = null;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.SetItems = /**
     *
     * @return {?}
     */
    function () {
        this._items = this.group.value;
        this.IsInitialEmpty();
    };
    /**
     *
     */
    /**
     *
     * @param {?} item
     * @return {?}
     */
    CompleterComponent.prototype.SelectItem = /**
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var i;
        if (typeof item === 'string') {
            i = this._items[item];
            this._DOM.selected = item;
        }
        else {
            i = item;
            this._DOM.selected = SearchableAutoCompleteString(item.title, item.id);
        }
        this._completer = i.title;
        this._highlight = '';
        this.dropdown.Close(null, true);
        this.selected.emit({ group: { key: this.group.key }, item: i });
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.RunAsyncFunction = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var values;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._completer = value;
                        this._highlight = value;
                        this._DOM.selected = null;
                        if (!(value.length === 0)) return [3 /*break*/, 1];
                        this.group.InitialValue();
                        this.ClearModel();
                        this.dropdown.Close('', true);
                        return [3 /*break*/, 3];
                    case 1:
                        if (!(value.length > this.group.searchLength)) return [3 /*break*/, 3];
                        this._DOM.isLoading = true;
                        return [4 /*yield*/, this.group.async(value)];
                    case 2:
                        values = _a.sent();
                        this.group.SetNewValue(values, this.group.keys.titleKey);
                        this._DOM.isLoading = false;
                        this._items = this.group.value;
                        this.EmptySearch(this._items, value);
                        // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
                        this.IsInitialEmpty();
                        this.dropdown.Open();
                        _a.label = 3;
                    case 3:
                        this.cd.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.OnModelChange = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._completer = value;
        this._highlight = value;
        this._DOM.selected = null;
        if (value.length === 0) {
            this.ClearModel();
        }
        else if (value.length > this.group.searchLength) {
            this.CompareItemsAndSet(value);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ClearModel = /**
     *
     * @return {?}
     */
    function () {
        this._DOM.selected = null;
        this._DOM.notFound = false;
        this.cleared.emit(this.group.key);
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.CompareItemsAndSet = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var obj = {};
        for (var key in this.group.value) {
            if (ComparableAutoCompleteString(key).toLowerCase().indexOf(value.toLowerCase()) > -1) {
                obj[key] = this.group.value[key];
            }
        }
        this._items = obj;
        this.EmptySearch(this._items, value);
        // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
        this.IsInitialEmpty();
        this.dropdown.Open();
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.OnInputBlurred = /**
     *
     * @return {?}
     */
    function () {
        if (!this.HasChosenValue()) {
            /**
             * Let component know completer input has been cleared -
             * this function shows the list again, also resets children, if chosen.
             */
            this.OnModelChange('');
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} item
     * @return {?}
     */
    CompleterComponent.prototype.OnHoverDropdownItem = /**
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (typeof item === 'string') {
            this._DOM.placeholder = this._items[item];
            return;
        }
        if (item == null) {
            this._DOM.placeholder = null;
            return;
        }
        this._DOM.placeholder = item;
    };
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     * @return {?}
     */
    CompleterComponent.prototype.IsInitialEmpty = 
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     * @return {?}
     */
    function () {
        if (Object.keys(this._items).length === 0 && this._completer.length === 0) {
            this._DOM.empty = true;
            return;
        }
        this._DOM.empty = false;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.HasChosenValue = /**
     *
     * @return {?}
     */
    function () {
        return this._DOM.selected !== null;
    };
    /**
     *
     */
    /**
     *
     * @param {?} obj
     * @param {?} query
     * @return {?}
     */
    CompleterComponent.prototype.EmptySearch = /**
     *
     * @param {?} obj
     * @param {?} query
     * @return {?}
     */
    function (obj, query) {
        if (Object.keys(obj).length > 0) {
            this._DOM.notFound = false;
            return;
        }
        this._DOM.notFound = true;
        this.noResult.emit({ group: { key: this.group.key }, query: query });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ClearValue = /**
     *
     * @return {?}
     */
    function () {
        this._completer = '';
        this._DOM.selected = null;
        this.group.InitialValue();
        this.IsInitialEmpty();
        /**
         *
         */
        this.selected.emit({ group: { key: this.group.key }, item: null });
    };
    CompleterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-completer',
                    template: "\n        <div #element class=\"ng-autocomplete-dropdown\"\n             [ngClass]=\"{'open': dropdown._open, 'is-loading': _DOM.isLoading, 'is-async': group.async !== null}\">\n\n            <!--GROUP: {{group.key}}-->\n\n            <div class=\"ng-autocomplete-inputs\" (click)=\"RegisterClick()\"\n                 [ngClass]=\"{'completion-off': !group.completion}\">\n                <span class=\"ng-autocomplete-placeholder\"\n                      *ngIf=\"_DOM.placeholder\">\n                  <ng-container *ngIf=\"group.placeholderValue\">\n                      <ng-template *ngTemplateOutlet=\"group.placeholderValue; context: {$implicit: _DOM.placeholder}\"></ng-template>\n                  </ng-container>\n                  <ng-template [ngIf]=\"!group.placeholderValue\">\n                      {{_DOM.placeholder.title}}\n                  </ng-template>\n                </span>\n                <input #input type=\"text\" [placeholder]=\"group.placeholder\" name=\"completer\" [ngModel]=\"_completer\"\n                       (ngModelChange)=\"_change.next($event);\"\n                       [value]=\"_completer\"\n                       [tabIndex]=\"_disabled ? -1 : 0\"\n                       autocomplete=\"new-password\"\n                       (focus)=\"OpenDropdown()\" class=\"ng-autocomplete-input\">\n\n                <span [ngClass]=\"{'open': dropdown._open}\" class=\"ng-autocomplete-dropdown-icon\"\n                      (click)=\"DropdownArray()\"></span>\n            </div>\n\n            <div class=\"ng-dropdown\" ngDropdown [list]=\"_items\" [element]=\"element\" [input]=\"input\"\n                 [ngClass]=\"{'is-initial-empty': _DOM.empty}\"\n                 [active]=\"_DOM.selected\" [key]=\"group.key\"\n                 [completion]=\"group.completion\"\n                 [parentDetector]=\"cd\"\n                 (hover)=\"OnHoverDropdownItem($event)\"\n                 (selected)=\"SelectItem($event)\"\n                 (closed)=\"OnInputBlurred()\"\n            >\n                <div *ngIf=\"_DOM.notFound && group.noResults\" class=\"dropdown-item no-results\">\n                    <ng-container *ngIf=\"group.noResults\">\n                        <ng-template *ngTemplateOutlet=\"group.noResults; context: {$implicit: _completer}\"></ng-template>\n                    </ng-container>\n                </div>\n\n                <div class=\"dropdown-item\" *ngFor=\"let item of _items | keys; let i = index\"\n                     (click)=\"SelectItem(_items[item])\" [ngClass]=\"_items[item].className\">\n                    <ng-container *ngIf=\"group.dropdownValue\">\n                        <ng-template\n                            *ngTemplateOutlet=\"group.dropdownValue; context: {$implicit: _items[item], highlight: _items[item].title | highlight:_highlight}\"></ng-template>\n                    </ng-container>\n\n                    <div *ngIf=\"!group.dropdownValue\" [innerHTML]=\"_items[item].title | highlight:_highlight\"></div>\n                </div>\n            </div>\n        </div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n        .ng-autocomplete-inputs {\n            position: relative;\n        }\n\n        .ng-autocomplete-inputs input[type=text]::-ms-clear,\n        .ng-autocomplete-inputs input[type=text]::-ms-reveal {\n            display: none;\n            width: 0;\n            height: 0;\n        }\n\n        .ng-autocomplete-inputs.completion-off {\n            cursor: pointer;\n        }\n\n        .ng-autocomplete-inputs.completion-off input {\n            pointer-events: none;\n        }\n\n        .ng-autocomplete-placeholder {\n            pointer-events: none;\n        }\n\n        .ng-autocomplete-dropdown-icon {\n\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown {\n            display: none;\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown.is-empty {\n            display: none;\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown.open {\n            display: block;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    CompleterComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    CompleterComponent.propDecorators = {
        dropdown: [{ type: ViewChild, args: [NgDropdownDirective,] }],
        cleared: [{ type: Output }],
        selected: [{ type: Output }],
        noResult: [{ type: Output, args: ['no-result',] }],
        group: [{ type: Input }]
    };
    return CompleterComponent;
}());
export { CompleterComponent };
if (false) {
    /** @type {?} */
    CompleterComponent.prototype.dropdown;
    /** @type {?} */
    CompleterComponent.prototype.cleared;
    /** @type {?} */
    CompleterComponent.prototype.selected;
    /** @type {?} */
    CompleterComponent.prototype.noResult;
    /** @type {?} */
    CompleterComponent.prototype.group;
    /** @type {?} */
    CompleterComponent.prototype._change;
    /** @type {?} */
    CompleterComponent.prototype._items;
    /** @type {?} */
    CompleterComponent.prototype._completer;
    /** @type {?} */
    CompleterComponent.prototype._highlight;
    /** @type {?} */
    CompleterComponent.prototype._disabled;
    /** @type {?} */
    CompleterComponent.prototype._DOM;
    /**
     * @type {?}
     * @private
     */
    CompleterComponent.prototype._zone;
    /** @type {?} */
    CompleterComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWF1dG8tY29tcGxldGUvIiwic291cmNlcyI6WyJsaWIvY29tcGxldGVyL2NvbXBsZXRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBVSxNQUFNLEVBQUUsU0FBUyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlJLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2pFLE9BQU8sRUFFSCw0QkFBNEIsRUFDNUIsNEJBQTRCLEVBRS9CLE1BQU0sNkJBQTZCLENBQUM7QUFDckMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFeEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQjtJQTBISSw0QkFBb0IsS0FBYSxFQUFTLEVBQXFCO1FBQTNDLFVBQUssR0FBTCxLQUFLLENBQVE7UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQXJCOUMsWUFBTyxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBQzNELGFBQVEsR0FBNEMsSUFBSSxZQUFZLEVBQTZCLENBQUM7UUFDdkYsYUFBUSxHQUFnQyxJQUFJLFlBQVksRUFBaUIsQ0FBQztRQUV0RixVQUFLLEdBQXNCLG1CQUFtQixFQUFFLEVBQUEsQ0FBQztRQUVqRSxZQUFPLEdBQW9CLElBQUksT0FBTyxFQUFVLENBQUM7UUFDakQsV0FBTSxHQUEwQyxFQUFFLENBQUM7UUFDbkQsZUFBVSxHQUFXLEVBQUUsQ0FBQztRQUN4QixlQUFVLEdBQVcsRUFBRSxDQUFDO1FBQ3hCLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFFM0IsU0FB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cyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE5nWm9uZSwgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdXRvY29tcGxldGVHcm91cCB9IGZyb20gJy4uL2NsYXNzZXMvQXV0b2NvbXBsZXRlR3JvdXAnO1xuaW1wb3J0IHtcbiAgICBBdXRvY29tcGxldGVJdGVtLFxuICAgIENvbXBhcmFibGVBdXRvQ29tcGxldGVTdHJpbmcsXG4gICAgU2VhcmNoYWJsZUF1dG9Db21wbGV0ZVN0cmluZyxcbiAgICBTdHJpcHBlZEF1dG9jb21wbGV0ZUdyb3VwXG59IGZyb20gJy4uL2NsYXNzZXMvQXV0b2NvbXBsZXRlSXRlbSc7XG5pbXBvcnQgeyBOZ0Ryb3Bkb3duRGlyZWN0aXZlIH0gZnJvbSAnLi4vZHJvcGRvd24vbmctZHJvcGRvd24uZGlyZWN0aXZlJztcbmltcG9ydCB7IEdyb3VwTm9SZXN1bHQgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmctY29tcGxldGVyJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGl2ICNlbGVtZW50IGNsYXNzPVwibmctYXV0b2NvbXBsZXRlLWRyb3Bkb3duXCJcbiAgICAgICAgICAgICBbbmdDbGFzc109XCJ7J29wZW4nOiBkcm9wZG93bi5fb3BlbiwgJ2lzLWxvYWRpbmcnOiBfRE9NLmlzTG9hZGluZywgJ2lzLWFzeW5jJzogZ3JvdXAuYXN5bmMgIT09IG51bGx9XCI+XG5cbiAgICAgICAgICAgIDwhLS1HUk9VUDoge3tncm91cC5rZXl9fS0tPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmctYXV0b2NvbXBsZXRlLWlucHV0c1wiIChjbGljayk9XCJSZWdpc3RlckNsaWNrKClcIlxuICAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7J2NvbXBsZXRpb24tb2ZmJzogIWdyb3VwLmNvbXBsZXRpb259XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJuZy1hdXRvY29tcGxldGUtcGxhY2Vob2xkZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiX0RPTS5wbGFjZWhvbGRlclwiPlxuICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImdyb3VwLnBsYWNlaG9sZGVyVmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgKm5nVGVtcGxhdGVPdXRsZXQ9XCJncm91cC5wbGFjZWhvbGRlclZhbHVlOyBjb250ZXh0OiB7JGltcGxpY2l0OiBfRE9NLnBsYWNlaG9sZGVyfVwiPjwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCIhZ3JvdXAucGxhY2Vob2xkZXJWYWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgIHt7X0RPTS5wbGFjZWhvbGRlci50aXRsZX19XG4gICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgI2lucHV0IHR5cGU9XCJ0ZXh0XCIgW3BsYWNlaG9sZGVyXT1cImdyb3VwLnBsYWNlaG9sZGVyXCIgbmFtZT1cImNvbXBsZXRlclwiIFtuZ01vZGVsXT1cIl9jb21wbGV0ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAobmdNb2RlbENoYW5nZSk9XCJfY2hhbmdlLm5leHQoJGV2ZW50KTtcIlxuICAgICAgICAgICAgICAgICAgICAgICBbdmFsdWVdPVwiX2NvbXBsZXRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgIFt0YWJJbmRleF09XCJfZGlzYWJsZWQgPyAtMSA6IDBcIlxuICAgICAgICAgICAgICAgICAgICAgICBhdXRvY29tcGxldGU9XCJuZXctcGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAoZm9jdXMpPVwiT3BlbkRyb3Bkb3duKClcIiBjbGFzcz1cIm5nLWF1dG9jb21wbGV0ZS1pbnB1dFwiPlxuXG4gICAgICAgICAgICAgICAgPHNwYW4gW25nQ2xhc3NdPVwieydvcGVuJzogZHJvcGRvd24uX29wZW59XCIgY2xhc3M9XCJuZy1hdXRvY29tcGxldGUtZHJvcGRvd24taWNvblwiXG4gICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cIkRyb3Bkb3duQXJyYXkoKVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmctZHJvcGRvd25cIiBuZ0Ryb3Bkb3duIFtsaXN0XT1cIl9pdGVtc1wiIFtlbGVtZW50XT1cImVsZW1lbnRcIiBbaW5wdXRdPVwiaW5wdXRcIlxuICAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7J2lzLWluaXRpYWwtZW1wdHknOiBfRE9NLmVtcHR5fVwiXG4gICAgICAgICAgICAgICAgIFthY3RpdmVdPVwiX0RPTS5zZWxlY3RlZFwiIFtrZXldPVwiZ3JvdXAua2V5XCJcbiAgICAgICAgICAgICAgICAgW2NvbXBsZXRpb25dPVwiZ3JvdXAuY29tcGxldGlvblwiXG4gICAgICAgICAgICAgICAgIFtwYXJlbnREZXRlY3Rvcl09XCJjZFwiXG4gICAgICAgICAgICAgICAgIChob3Zlcik9XCJPbkhvdmVyRHJvcGRvd25JdGVtKCRldmVudClcIlxuICAgICAgICAgICAgICAgICAoc2VsZWN0ZWQpPVwiU2VsZWN0SXRlbSgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAgKGNsb3NlZCk9XCJPbklucHV0Qmx1cnJlZCgpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiX0RPTS5ub3RGb3VuZCAmJiBncm91cC5ub1Jlc3VsdHNcIiBjbGFzcz1cImRyb3Bkb3duLWl0ZW0gbm8tcmVzdWx0c1wiPlxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZ3JvdXAubm9SZXN1bHRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgKm5nVGVtcGxhdGVPdXRsZXQ9XCJncm91cC5ub1Jlc3VsdHM7IGNvbnRleHQ6IHskaW1wbGljaXQ6IF9jb21wbGV0ZXJ9XCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24taXRlbVwiICpuZ0Zvcj1cImxldCBpdGVtIG9mIF9pdGVtcyB8IGtleXM7IGxldCBpID0gaW5kZXhcIlxuICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cIlNlbGVjdEl0ZW0oX2l0ZW1zW2l0ZW1dKVwiIFtuZ0NsYXNzXT1cIl9pdGVtc1tpdGVtXS5jbGFzc05hbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImdyb3VwLmRyb3Bkb3duVmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiZ3JvdXAuZHJvcGRvd25WYWx1ZTsgY29udGV4dDogeyRpbXBsaWNpdDogX2l0ZW1zW2l0ZW1dLCBoaWdobGlnaHQ6IF9pdGVtc1tpdGVtXS50aXRsZSB8IGhpZ2hsaWdodDpfaGlnaGxpZ2h0fVwiPjwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCIhZ3JvdXAuZHJvcGRvd25WYWx1ZVwiIFtpbm5lckhUTUxdPVwiX2l0ZW1zW2l0ZW1dLnRpdGxlIHwgaGlnaGxpZ2h0Ol9oaWdobGlnaHRcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5gLFxuICAgIHN0eWxlczogW2BcbiAgICAgICAgLm5nLWF1dG9jb21wbGV0ZS1pbnB1dHMge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG5cbiAgICAgICAgLm5nLWF1dG9jb21wbGV0ZS1pbnB1dHMgaW5wdXRbdHlwZT10ZXh0XTo6LW1zLWNsZWFyLFxuICAgICAgICAubmctYXV0b2NvbXBsZXRlLWlucHV0cyBpbnB1dFt0eXBlPXRleHRdOjotbXMtcmV2ZWFsIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgICAgIGhlaWdodDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5uZy1hdXRvY29tcGxldGUtaW5wdXRzLmNvbXBsZXRpb24tb2ZmIHtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5uZy1hdXRvY29tcGxldGUtaW5wdXRzLmNvbXBsZXRpb24tb2ZmIGlucHV0IHtcbiAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLm5nLWF1dG9jb21wbGV0ZS1wbGFjZWhvbGRlciB7XG4gICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5uZy1hdXRvY29tcGxldGUtZHJvcGRvd24taWNvbiB7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC5uZy1hdXRvY29tcGxldGUtZHJvcGRvd24gLm5nLWRyb3Bkb3duIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAubmctYXV0b2NvbXBsZXRlLWRyb3Bkb3duIC5uZy1kcm9wZG93bi5pcy1lbXB0eSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLm5nLWF1dG9jb21wbGV0ZS1kcm9wZG93biAubmctZHJvcGRvd24ub3BlbiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgfVxuICAgIGBdLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIENvbXBsZXRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQFZpZXdDaGlsZChOZ0Ryb3Bkb3duRGlyZWN0aXZlKSBwdWJsaWMgZHJvcGRvd246IE5nRHJvcGRvd25EaXJlY3RpdmU7XG5cbiAgICBAT3V0cHV0KCkgcHVibGljIGNsZWFyZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gICAgQE91dHB1dCgpIHB1YmxpYyBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPFN0cmlwcGVkQXV0b2NvbXBsZXRlR3JvdXA+ID0gbmV3IEV2ZW50RW1pdHRlcjxTdHJpcHBlZEF1dG9jb21wbGV0ZUdyb3VwPigpO1xuICAgIEBPdXRwdXQoJ25vLXJlc3VsdCcpIHB1YmxpYyBub1Jlc3VsdDogRXZlbnRFbWl0dGVyPEdyb3VwTm9SZXN1bHQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxHcm91cE5vUmVzdWx0PigpO1xuXG4gICAgQElucHV0KCkgcHVibGljIGdyb3VwOiBBdXRvY29tcGxldGVHcm91cCA9IDxBdXRvY29tcGxldGVHcm91cD57fTtcblxuICAgIF9jaGFuZ2U6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcbiAgICBfaXRlbXM6IHsgW3ZhbHVlOiBzdHJpbmddOiBBdXRvY29tcGxldGVJdGVtIH0gPSB7fTtcbiAgICBfY29tcGxldGVyOiBzdHJpbmcgPSAnJztcbiAgICBfaGlnaGxpZ2h0OiBzdHJpbmcgPSAnJztcbiAgICBfZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIF9ET00gPSB7XG4gICAgICAgIG5vdEZvdW5kOiA8Ym9vbGVhbj5mYWxzZSxcbiAgICAgICAgZW1wdHk6IDxib29sZWFuPmZhbHNlLFxuICAgICAgICBwbGFjZWhvbGRlcjogPEF1dG9jb21wbGV0ZUl0ZW0+bnVsbCxcbiAgICAgICAgc2VsZWN0ZWQ6IDxzdHJpbmc+JycsXG4gICAgICAgIGlzTG9hZGluZzogPGJvb2xlYW4+ZmFsc2VcblxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF96b25lOiBOZ1pvbmUsIHB1YmxpYyBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblxuICAgICAgICAgICAgdGhpcy5fY2hhbmdlLnBpcGUoXG4gICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lKDMwMCkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ncm91cC5hc3luYyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuUnVuQXN5bmNGdW5jdGlvbih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuT25Nb2RlbENoYW5nZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5TZXRJdGVtcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9ubHkgdXNlZCB3aGVuIGNvbXBsZXRpb24gaXMgb2ZmLlxuICAgICAqL1xuICAgIFJlZ2lzdGVyQ2xpY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5ncm91cC5jb21wbGV0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLlN3aXRjaERyb3Bkb3duU3RhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgRHJvcGRvd25BcnJheSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXAuY29tcGxldGlvbikge1xuICAgICAgICAgICAgdGhpcy5Td2l0Y2hEcm9wZG93blN0YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFN3aXRjaERyb3Bkb3duU3RhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmRyb3Bkb3duLl9vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLkNsb3NlRHJvcGRvd24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5PcGVuRHJvcGRvd24oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIENsb3NlRHJvcGRvd24oKSB7XG4gICAgICAgIHRoaXMuZHJvcGRvd24uX29wZW4gPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX0RPTS5wbGFjZWhvbGRlciA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBPcGVuRHJvcGRvd24oKSB7XG4gICAgICAgIHRoaXMuZHJvcGRvd24uT3BlbigpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fRE9NLnBsYWNlaG9sZGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFNldEl0ZW1zKCkge1xuICAgICAgICB0aGlzLl9pdGVtcyA9IHRoaXMuZ3JvdXAudmFsdWU7XG4gICAgICAgIHRoaXMuSXNJbml0aWFsRW1wdHkoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFNlbGVjdEl0ZW0oaXRlbTogQXV0b2NvbXBsZXRlSXRlbSB8IHN0cmluZykge1xuICAgICAgICBsZXQgaTogQXV0b2NvbXBsZXRlSXRlbTtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaSA9IHRoaXMuX2l0ZW1zW2l0ZW1dO1xuICAgICAgICAgICAgdGhpcy5fRE9NLnNlbGVjdGVkID0gaXRlbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGkgPSBpdGVtO1xuICAgICAgICAgICAgdGhpcy5fRE9NLnNlbGVjdGVkID0gU2VhcmNoYWJsZUF1dG9Db21wbGV0ZVN0cmluZyhpdGVtLnRpdGxlLCBpdGVtLmlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NvbXBsZXRlciA9IGkudGl0bGU7XG4gICAgICAgIHRoaXMuX2hpZ2hsaWdodCA9ICcnO1xuXG4gICAgICAgIHRoaXMuZHJvcGRvd24uQ2xvc2UobnVsbCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQuZW1pdCh7Z3JvdXA6IHtrZXk6IHRoaXMuZ3JvdXAua2V5fSwgaXRlbTogaX0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgUnVuQXN5bmNGdW5jdGlvbih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlciA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9oaWdobGlnaHQgPSB2YWx1ZTtcblxuICAgICAgICB0aGlzLl9ET00uc2VsZWN0ZWQgPSBudWxsO1xuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuSW5pdGlhbFZhbHVlKCk7XG4gICAgICAgICAgICB0aGlzLkNsZWFyTW9kZWwoKTtcblxuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5DbG9zZSgnJywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUubGVuZ3RoID4gdGhpcy5ncm91cC5zZWFyY2hMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX0RPTS5pc0xvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBhd2FpdCB0aGlzLmdyb3VwLmFzeW5jKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAuU2V0TmV3VmFsdWUodmFsdWVzLCB0aGlzLmdyb3VwLmtleXMudGl0bGVLZXkpO1xuXG4gICAgICAgICAgICB0aGlzLl9ET00uaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gdGhpcy5ncm91cC52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuRW1wdHlTZWFyY2godGhpcy5faXRlbXMsIHZhbHVlKTtcblxuICAgICAgICAgICAgLy8gVXNlciBoYXMgdHlwZWQgc29tZXRoaW5nIG5vdywgcmVzdWx0cyBjb3VsZCBiZSBzaG93bi4gV2UgbmVlZCB0byByZW1vdmUgdGhlIFwiaXMtaW5pdGlhbC1lbXB0eVwiIGNsYXNzLlxuICAgICAgICAgICAgdGhpcy5Jc0luaXRpYWxFbXB0eSgpO1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5PcGVuKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIE9uTW9kZWxDaGFuZ2UodmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jb21wbGV0ZXIgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5faGlnaGxpZ2h0ID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5fRE9NLnNlbGVjdGVkID0gbnVsbDtcblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLkNsZWFyTW9kZWwoKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5sZW5ndGggPiB0aGlzLmdyb3VwLnNlYXJjaExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5Db21wYXJlSXRlbXNBbmRTZXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBDbGVhck1vZGVsKCkge1xuICAgICAgICB0aGlzLl9ET00uc2VsZWN0ZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9ET00ubm90Rm91bmQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmNsZWFyZWQuZW1pdCh0aGlzLmdyb3VwLmtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBDb21wYXJlSXRlbXNBbmRTZXQodmFsdWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5ncm91cC52YWx1ZSkge1xuICAgICAgICAgICAgaWYgKENvbXBhcmFibGVBdXRvQ29tcGxldGVTdHJpbmcoa2V5KS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodmFsdWUudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIG9ialtrZXldID0gdGhpcy5ncm91cC52YWx1ZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXRlbXMgPSBvYmo7XG4gICAgICAgIHRoaXMuRW1wdHlTZWFyY2godGhpcy5faXRlbXMsIHZhbHVlKTtcblxuICAgICAgICAvLyBVc2VyIGhhcyB0eXBlZCBzb21ldGhpbmcgbm93LCByZXN1bHRzIGNvdWxkIGJlIHNob3duLiBXZSBuZWVkIHRvIHJlbW92ZSB0aGUgXCJpcy1pbml0aWFsLWVtcHR5XCIgY2xhc3MuXG4gICAgICAgIHRoaXMuSXNJbml0aWFsRW1wdHkoKTtcbiAgICAgICAgdGhpcy5kcm9wZG93bi5PcGVuKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBPbklucHV0Qmx1cnJlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLkhhc0Nob3NlblZhbHVlKCkpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTGV0IGNvbXBvbmVudCBrbm93IGNvbXBsZXRlciBpbnB1dCBoYXMgYmVlbiBjbGVhcmVkIC1cbiAgICAgICAgICAgICAqIHRoaXMgZnVuY3Rpb24gc2hvd3MgdGhlIGxpc3QgYWdhaW4sIGFsc28gcmVzZXRzIGNoaWxkcmVuLCBpZiBjaG9zZW4uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuT25Nb2RlbENoYW5nZSgnJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIE9uSG92ZXJEcm9wZG93bkl0ZW0oaXRlbTogQXV0b2NvbXBsZXRlSXRlbSB8IHN0cmluZykge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl9ET00ucGxhY2Vob2xkZXIgPSB0aGlzLl9pdGVtc1tpdGVtXTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9ET00ucGxhY2Vob2xkZXIgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fRE9NLnBsYWNlaG9sZGVyID0gaXRlbTtcbiAgICB9XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS8vXG4gICAgLy8gISBVdGlscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly9cblxuICAgIElzSW5pdGlhbEVtcHR5KCkge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5faXRlbXMpLmxlbmd0aCA9PT0gMCAmJiB0aGlzLl9jb21wbGV0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9ET00uZW1wdHkgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fRE9NLmVtcHR5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBIYXNDaG9zZW5WYWx1ZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX0RPTS5zZWxlY3RlZCAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIEVtcHR5U2VhcmNoKG9iajogT2JqZWN0LCBxdWVyeTogc3RyaW5nKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX0RPTS5ub3RGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fRE9NLm5vdEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ub1Jlc3VsdC5lbWl0KHtncm91cDoge2tleTogdGhpcy5ncm91cC5rZXl9LCBxdWVyeTogcXVlcnl9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIENsZWFyVmFsdWUoKSB7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlciA9ICcnO1xuICAgICAgICB0aGlzLl9ET00uc2VsZWN0ZWQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuZ3JvdXAuSW5pdGlhbFZhbHVlKCk7XG4gICAgICAgIHRoaXMuSXNJbml0aWFsRW1wdHkoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlbGVjdGVkLmVtaXQoe2dyb3VwOiB7a2V5OiB0aGlzLmdyb3VwLmtleX0sIGl0ZW06IG51bGx9KTtcbiAgICB9XG59XG4iXX0=