/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { CompleterComponent } from './completer/completer.component';
import { ReturnStringArrayByID } from './utils/utils';
import { Subject } from 'rxjs';
var NgAutoCompleteComponent = /** @class */ (function () {
    function NgAutoCompleteComponent(cdr) {
        this.cdr = cdr;
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = [];
        this.key = '';
        this.classes = [];
        this._viewHasBeenInit = false;
        this._viewInitSubject = new Subject();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ngOnInit = /**
     *
     * @return {?}
     */
    function () {
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ngAfterViewChecked = /**
     *
     * @return {?}
     */
    function () {
        if (!this._viewHasBeenInit) {
            /** @type {?} */
            var el = this.init.nativeElement.querySelector('.after-view-init');
            if (window.getComputedStyle(el).length > 0) {
                this._viewHasBeenInit = true;
                this._viewInitSubject.next(true);
            }
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} selected
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ListenToSelected = /**
     *
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        this.selected.emit(selected);
        /**
         *
         */
        this.SetChildren(selected);
    };
    /**
     *
     */
    /**
     *
     * @param {?} group
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.NoResult = /**
     *
     * @param {?} group
     * @return {?}
     */
    function (group) {
        this.noResult.emit(group);
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.InputCleared = /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        this.group.forEach(function (group) {
            if (group.key === key || group.parent === key) {
                _this.ResetInput(group.key);
            }
        });
        /**
         * Items may have changed, need to te re-set list in completer components.
         */
        this.TriggerChange();
    };
    /**
     *
     */
    /**
     *
     * @param {?} selected
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetChildren = /**
     *
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        var _this = this;
        this.group.forEach(function (item) {
            if (item.parent == selected.group.key) {
                _this.ResetInput(item.key);
                /**
                 *
                 */
                if (selected.item !== null && typeof selected.item.children !== 'undefined') {
                    item.SetNewValue(selected.item.children, selected.group.keys.titleKey);
                }
            }
        });
        /**
         * Items may have changed, need to te re-set list in completer components.
         */
        this.TriggerChange();
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.TriggerChange = /**
     *
     * @return {?}
     */
    function () {
        this.completers.forEach(function (completer) {
            completer.SetItems();
        });
    };
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     */
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.GetInput = 
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.completers.reduce(function (result, completer) {
            if (completer.group.key === key) {
                result = completer;
            }
            return result;
        }, (/** @type {?} */ ({})));
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} f
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SubscribeInput = /**
     *
     * @param {?} key
     * @param {?} f
     * @return {?}
     */
    function (key, f) {
        var _this = this;
        if (this._viewHasBeenInit) {
            /** @type {?} */
            var completer = this.GetInput(key);
            /**
             *
             */
            f(completer);
            return;
        }
        this._viewInitSubject.subscribe(function (_bool) {
            /** @type {?} */
            var completer = _this.GetInput(key);
            setTimeout(function () {
                f(completer);
            });
            _this._viewInitSubject.unsubscribe();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ResetInput = /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.SubscribeInput(key, function (completer) {
            completer.ClearValue();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} values
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetValues = /**
     *
     * @param {?} key
     * @param {?} values
     * @return {?}
     */
    function (key, values) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer.group.SetValues(values);
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetTemplate = /**
     *
     * @param {?} key
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    function (key, type, template) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer.group[type] = template;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} promise
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetAsync = /**
     *
     * @param {?} key
     * @param {?} promise
     * @return {?}
     */
    function (key, promise) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer.group.async = promise;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetEnable = /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer._disabled = false;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetDisable = /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer._disabled = true;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} id
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SelectItem = /**
     *
     * @param {?} key
     * @param {?} id
     * @return {?}
     */
    function (key, id) {
        this.SubscribeInput(key, function (completer) {
            Object.keys(completer._items).forEach(function (key) {
                /** @type {?} */
                var f = "_id_" + String(id);
                /** @type {?} */
                var c = key.substring(key.indexOf(f), key.length);
                if (f === c) {
                    completer.SelectItem(completer._items[key]);
                }
            });
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} ids
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.RemovableValues = /**
     *
     * @param {?} key
     * @param {?} ids
     * @return {?}
     */
    function (key, ids) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer.group.Removables(ReturnStringArrayByID(ids));
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ResetInputs = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this.group.forEach(function (item) {
            _this.ResetInput(item.key);
        });
    };
    // =======================================================================//
    // ! Static (utils)                                                       //
    // =======================================================================//
    /**
     *
     */
    // =======================================================================//
    // ! Static (utils)                                                       //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @param {?} list
     * @return {?}
     */
    NgAutoCompleteComponent.FindCompleter = 
    // =======================================================================//
    // ! Static (utils)                                                       //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @param {?} list
     * @return {?}
     */
    function (key, list) {
        /** @type {?} */
        var completer = list.filter(function (completer) {
            return key === completer.key;
        });
        if (typeof completer[0] !== 'undefined') {
            return completer[0];
        }
        return null;
    };
    NgAutoCompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-auto-complete',
                    template: "\n        <div #init style=\"display: none;\"><span class=\"after-view-init\"></span></div>\n        <ng-completer [ngClass]=\"classes\" *ngFor=\"let item of group\" (cleared)=\"InputCleared($event)\"\n                      (no-result)=\"NoResult($event)\"\n                      (selected)=\"ListenToSelected($event)\"\n                      [group]=\"item\"></ng-completer>\n    "
                }] }
    ];
    /** @nocollapse */
    NgAutoCompleteComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NgAutoCompleteComponent.propDecorators = {
        completers: [{ type: ViewChildren, args: [CompleterComponent,] }],
        init: [{ type: ViewChild, args: ['init',] }],
        selected: [{ type: Output }],
        noResult: [{ type: Output, args: ['no-result',] }],
        group: [{ type: Input }],
        key: [{ type: Input }],
        classes: [{ type: Input }]
    };
    return NgAutoCompleteComponent;
}());
export { NgAutoCompleteComponent };
if (false) {
    /** @type {?} */
    NgAutoCompleteComponent.prototype.completers;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.init;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.selected;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.noResult;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.group;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.key;
    /** @type {?} */
    NgAutoCompleteComponent.prototype.classes;
    /** @type {?} */
    NgAutoCompleteComponent.prototype._viewHasBeenInit;
    /** @type {?} */
    NgAutoCompleteComponent.prototype._viewInitSubject;
    /**
     * @type {?}
     * @private
     */
    NgAutoCompleteComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,