/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function StrippedAutocompleteGroup() { }
if (false) {
    /** @type {?} */
    StrippedAutocompleteGroup.prototype.group;
    /** @type {?} */
    StrippedAutocompleteGroup.prototype.item;
}
export class AutocompleteItem {
    /**
     * @param {?} title
     * @param {?} id
     * @param {?} className
     * @param {?} original
     */
    constructor(title, id, className, original) {
        this.title = title;
        this.id = id;
        this.className = className;
        this.original = original;
    }
}
if (false) {
    /** @type {?} */
    AutocompleteItem.prototype.title;
    /** @type {?} */
    AutocompleteItem.prototype.id;
    /** @type {?} */
    AutocompleteItem.prototype.children;
    /** @type {?} */
    AutocompleteItem.prototype.original;
    /** @type {?} */
    AutocompleteItem.prototype.className;
}
/**
 *
 * @param {?} items
 * @param {?} titleKey
 * @param {?=} childrenKey
 * @return {?}
 */
export function SearchableAutoCompleteItems(items, titleKey, childrenKey = null) {
    return items.reduce(function (r, i) {
        /** @type {?} */
        const t = SearchableAutoCompleteString(i[titleKey], i.id);
        if (typeof r[t] === 'undefined') {
            r[t] = TransformToAutocompleteItem(i, titleKey, childrenKey);
        }
        return r;
    }, {});
}
/**
 *
 * @param {?} key
 * @param {?} id
 * @return {?}
 */
export function SearchableAutoCompleteString(key, id) {
    return `${key.replace(/ /g, '_')}_id_${String(id)}`;
}
/**
 *
 * @param {?} str
 * @return {?}
 */
export function ComparableAutoCompleteString(str) {
    return str.replace(/_/g, ' ');
}
/**
 * object must have an ID
 * @param {?} object
 * @param {?} titleKey
 * @param {?=} childrenKey
 * @return {?}
 */
export function TransformToAutocompleteItem(object, titleKey, childrenKey = null) {
    /** @type {?} */
    const item = new AutocompleteItem(object[titleKey], object.id, object.className, object);
    /**
     * if there are children, add these.
     */
    if (childrenKey !== null) {
        item.children = object[childrenKey];
    }
    return item;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0b2NvbXBsZXRlSXRlbS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWF1dG8tY29tcGxldGUvIiwic291cmNlcyI6WyJsaWIvY2xhc3Nlcy9BdXRvY29tcGxldGVJdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwrQ0FHQzs7O0lBRkcsMENBQXVCOztJQUN2Qix5Q0FBdUI7O0FBRzNCLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7Ozs7SUFPekIsWUFBWSxLQUFhLEVBQUUsRUFBbUIsRUFBRSxTQUFpQixFQUFFLFFBQWE7UUFDNUUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0NBQ0o7OztJQVpHLGlDQUFjOztJQUNkLDhCQUFxQjs7SUFDckIsb0NBQWdCOztJQUNoQixvQ0FBYzs7SUFDZCxxQ0FBa0I7Ozs7Ozs7OztBQWF0QixNQUFNLFVBQVUsMkJBQTJCLENBQUMsS0FBdUQsRUFBRSxRQUFnQixFQUFFLGNBQTZCLElBQUk7SUFDcEosT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7O2NBQ3hCLENBQUMsR0FBRyw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUV6RCxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsRUFBRTtZQUM3QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsMkJBQTJCLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUNoRTtRQUVELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1gsQ0FBQzs7Ozs7OztBQUtELE1BQU0sVUFBVSw0QkFBNEIsQ0FBQyxHQUFXLEVBQUUsRUFBbUI7SUFDekUsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3hELENBQUM7Ozs7OztBQUtELE1BQU0sVUFBVSw0QkFBNEIsQ0FBQyxHQUFXO0lBQ3BELE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQzs7Ozs7Ozs7QUFNRCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsTUFBMEUsRUFBRSxRQUFnQixFQUFFLGNBQTZCLElBQUk7O1VBQ2pLLElBQUksR0FBRyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDO0lBRXhGOztPQUVHO0lBQ0gsSUFBSSxXQUFXLEtBQUssSUFBSSxFQUFFO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU3RyaXBwZWRBdXRvY29tcGxldGVHcm91cCB7XG4gICAgZ3JvdXA6IHsga2V5OiBzdHJpbmcgfTtcbiAgICBpdGVtOiBBdXRvY29tcGxldGVJdGVtO1xufVxuXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlSXRlbSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBpZD86IHN0cmluZyB8IG51bWJlcjtcbiAgICBjaGlsZHJlbjogYW55W107XG4gICAgb3JpZ2luYWw6IGFueTtcbiAgICBjbGFzc05hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHRpdGxlOiBzdHJpbmcsIGlkOiBzdHJpbmcgfCBudW1iZXIsIGNsYXNzTmFtZTogc3RyaW5nLCBvcmlnaW5hbDogYW55KSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgdGhpcy5vcmlnaW5hbCA9IG9yaWdpbmFsO1xuICAgIH1cbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gU2VhcmNoYWJsZUF1dG9Db21wbGV0ZUl0ZW1zKGl0ZW1zOiB7IGlkPzogc3RyaW5nIHwgbnVtYmVyOyBbdmFsdWU6IHN0cmluZ106IGFueSB9W10sIHRpdGxlS2V5OiBzdHJpbmcsIGNoaWxkcmVuS2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbCk6IHsgW3ZhbHVlOiBzdHJpbmddOiBBdXRvY29tcGxldGVJdGVtIH0ge1xuICAgIHJldHVybiBpdGVtcy5yZWR1Y2UoZnVuY3Rpb24gKHIsIGkpIHtcbiAgICAgICAgY29uc3QgdCA9IFNlYXJjaGFibGVBdXRvQ29tcGxldGVTdHJpbmcoaVt0aXRsZUtleV0sIGkuaWQpO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygclt0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJbdF0gPSBUcmFuc2Zvcm1Ub0F1dG9jb21wbGV0ZUl0ZW0oaSwgdGl0bGVLZXksIGNoaWxkcmVuS2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByO1xuICAgIH0sIHt9KTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gU2VhcmNoYWJsZUF1dG9Db21wbGV0ZVN0cmluZyhrZXk6IHN0cmluZywgaWQ6IHN0cmluZyB8IG51bWJlcikge1xuICAgIHJldHVybiBgJHtrZXkucmVwbGFjZSgvIC9nLCAnXycpfV9pZF8ke1N0cmluZyhpZCl9YDtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcGFyYWJsZUF1dG9Db21wbGV0ZVN0cmluZyhzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXy9nLCAnICcpO1xufVxuXG4vKipcbiAqIG9iamVjdCBtdXN0IGhhdmUgYW4gSURcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNmb3JtVG9BdXRvY29tcGxldGVJdGVtKG9iamVjdDogeyBpZD86IHN0cmluZyB8IG51bWJlcjsgW3ZhbHVlOiBzdHJpbmddOiBhbnksIGNsYXNzTmFtZT86IHN0cmluZyB9LCB0aXRsZUtleTogc3RyaW5nLCBjaGlsZHJlbktleTogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBjb25zdCBpdGVtID0gbmV3IEF1dG9jb21wbGV0ZUl0ZW0ob2JqZWN0W3RpdGxlS2V5XSwgb2JqZWN0LmlkLCBvYmplY3QuY2xhc3NOYW1lLCBvYmplY3QpO1xuXG4gICAgLyoqXG4gICAgICogaWYgdGhlcmUgYXJlIGNoaWxkcmVuLCBhZGQgdGhlc2UuXG4gICAgICovXG4gICAgaWYgKGNoaWxkcmVuS2V5ICE9PSBudWxsKSB7XG4gICAgICAgIGl0ZW0uY2hpbGRyZW4gPSBvYmplY3RbY2hpbGRyZW5LZXldO1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtO1xufVxuIl19