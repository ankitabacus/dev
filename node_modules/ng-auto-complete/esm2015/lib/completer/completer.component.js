/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { debounceTime } from 'rxjs/operators';
import { Component, EventEmitter, Input, NgZone, Output, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { AutocompleteGroup } from '../classes/AutocompleteGroup';
import { ComparableAutoCompleteString, SearchableAutoCompleteString } from '../classes/AutocompleteItem';
import { NgDropdownDirective } from '../dropdown/ng-dropdown.directive';
import { Subject } from 'rxjs';
export class CompleterComponent {
    /**
     * @param {?} _zone
     * @param {?} cd
     */
    constructor(_zone, cd) {
        this._zone = _zone;
        this.cd = cd;
        this.cleared = new EventEmitter();
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = (/** @type {?} */ ({}));
        this._change = new Subject();
        this._items = {};
        this._completer = '';
        this._highlight = '';
        this._disabled = false;
        this._DOM = {
            notFound: (/** @type {?} */ (false)),
            empty: (/** @type {?} */ (false)),
            placeholder: (/** @type {?} */ (null)),
            selected: (/** @type {?} */ ('')),
            isLoading: (/** @type {?} */ (false))
        };
    }
    /**
     *
     * @return {?}
     */
    ngOnInit() {
        this._zone.runOutsideAngular(() => {
            this._change.pipe(debounceTime(300))
                .subscribe((value) => {
                this._zone.run(() => {
                    if (this.group.async !== null) {
                        this.RunAsyncFunction(value);
                    }
                    else {
                        this.OnModelChange(value);
                    }
                    this.cd.detectChanges();
                });
            });
        });
        this.SetItems();
    }
    /**
     * Only used when completion is off.
     * @return {?}
     */
    RegisterClick() {
        if (!this.group.completion) {
            this.SwitchDropdownState();
        }
    }
    /**
     *
     * @return {?}
     */
    DropdownArray() {
        if (this.group.completion) {
            this.SwitchDropdownState();
        }
    }
    /**
     *
     * @return {?}
     */
    SwitchDropdownState() {
        if (this.dropdown._open) {
            this.CloseDropdown();
            return;
        }
        /**
         *
         */
        this.OpenDropdown();
    }
    /**
     *
     * @return {?}
     */
    CloseDropdown() {
        this.dropdown._open = false;
        /**
         *
         */
        this._DOM.placeholder = null;
    }
    /**
     *
     * @return {?}
     */
    OpenDropdown() {
        this.dropdown.Open();
        /**
         *
         */
        this._DOM.placeholder = null;
    }
    /**
     *
     * @return {?}
     */
    SetItems() {
        this._items = this.group.value;
        this.IsInitialEmpty();
    }
    /**
     *
     * @param {?} item
     * @return {?}
     */
    SelectItem(item) {
        /** @type {?} */
        let i;
        if (typeof item === 'string') {
            i = this._items[item];
            this._DOM.selected = item;
        }
        else {
            i = item;
            this._DOM.selected = SearchableAutoCompleteString(item.title, item.id);
        }
        this._completer = i.title;
        this._highlight = '';
        this.dropdown.Close(null, true);
        this.selected.emit({ group: { key: this.group.key }, item: i });
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    RunAsyncFunction(value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this._completer = value;
            this._highlight = value;
            this._DOM.selected = null;
            if (value.length === 0) {
                this.group.InitialValue();
                this.ClearModel();
                this.dropdown.Close('', true);
            }
            else if (value.length > this.group.searchLength) {
                this._DOM.isLoading = true;
                /** @type {?} */
                const values = yield this.group.async(value);
                this.group.SetNewValue(values, this.group.keys.titleKey);
                this._DOM.isLoading = false;
                this._items = this.group.value;
                this.EmptySearch(this._items, value);
                // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
                this.IsInitialEmpty();
                this.dropdown.Open();
            }
            this.cd.detectChanges();
        });
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    OnModelChange(value) {
        this._completer = value;
        this._highlight = value;
        this._DOM.selected = null;
        if (value.length === 0) {
            this.ClearModel();
        }
        else if (value.length > this.group.searchLength) {
            this.CompareItemsAndSet(value);
        }
    }
    /**
     *
     * @return {?}
     */
    ClearModel() {
        this._DOM.selected = null;
        this._DOM.notFound = false;
        this.cleared.emit(this.group.key);
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompareItemsAndSet(value) {
        /** @type {?} */
        const obj = {};
        for (const key in this.group.value) {
            if (ComparableAutoCompleteString(key).toLowerCase().indexOf(value.toLowerCase()) > -1) {
                obj[key] = this.group.value[key];
            }
        }
        this._items = obj;
        this.EmptySearch(this._items, value);
        // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
        this.IsInitialEmpty();
        this.dropdown.Open();
    }
    /**
     *
     * @return {?}
     */
    OnInputBlurred() {
        if (!this.HasChosenValue()) {
            /**
             * Let component know completer input has been cleared -
             * this function shows the list again, also resets children, if chosen.
             */
            this.OnModelChange('');
        }
    }
    /**
     *
     * @param {?} item
     * @return {?}
     */
    OnHoverDropdownItem(item) {
        if (typeof item === 'string') {
            this._DOM.placeholder = this._items[item];
            return;
        }
        if (item == null) {
            this._DOM.placeholder = null;
            return;
        }
        this._DOM.placeholder = item;
    }
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     * @return {?}
     */
    IsInitialEmpty() {
        if (Object.keys(this._items).length === 0 && this._completer.length === 0) {
            this._DOM.empty = true;
            return;
        }
        this._DOM.empty = false;
    }
    /**
     *
     * @return {?}
     */
    HasChosenValue() {
        return this._DOM.selected !== null;
    }
    /**
     *
     * @param {?} obj
     * @param {?} query
     * @return {?}
     */
    EmptySearch(obj, query) {
        if (Object.keys(obj).length > 0) {
            this._DOM.notFound = false;
            return;
        }
        this._DOM.notFound = true;
        this.noResult.emit({ group: { key: this.group.key }, query: query });
    }
    /**
     *
     * @return {?}
     */
    ClearValue() {
        this._completer = '';
        this._DOM.selected = null;
        this.group.InitialValue();
        this.IsInitialEmpty();
        /**
         *
         */
        this.selected.emit({ group: { key: this.group.key }, item: null });
    }
}
CompleterComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-completer',
                template: `
        <div #element class="ng-autocomplete-dropdown"
             [ngClass]="{'open': dropdown._open, 'is-loading': _DOM.isLoading, 'is-async': group.async !== null}">

            <!--GROUP: {{group.key}}-->

            <div class="ng-autocomplete-inputs" (click)="RegisterClick()"
                 [ngClass]="{'completion-off': !group.completion}">
                <span class="ng-autocomplete-placeholder"
                      *ngIf="_DOM.placeholder">
                  <ng-container *ngIf="group.placeholderValue">
                      <ng-template *ngTemplateOutlet="group.placeholderValue; context: {$implicit: _DOM.placeholder}"></ng-template>
                  </ng-container>
                  <ng-template [ngIf]="!group.placeholderValue">
                      {{_DOM.placeholder.title}}
                  </ng-template>
                </span>
                <input #input type="text" [placeholder]="group.placeholder" name="completer" [ngModel]="_completer"
                       (ngModelChange)="_change.next($event);"
                       [value]="_completer"
                       [tabIndex]="_disabled ? -1 : 0"
                       autocomplete="new-password"
                       (focus)="OpenDropdown()" class="ng-autocomplete-input">

                <span [ngClass]="{'open': dropdown._open}" class="ng-autocomplete-dropdown-icon"
                      (click)="DropdownArray()"></span>
            </div>

            <div class="ng-dropdown" ngDropdown [list]="_items" [element]="element" [input]="input"
                 [ngClass]="{'is-initial-empty': _DOM.empty}"
                 [active]="_DOM.selected" [key]="group.key"
                 [completion]="group.completion"
                 [parentDetector]="cd"
                 (hover)="OnHoverDropdownItem($event)"
                 (selected)="SelectItem($event)"
                 (closed)="OnInputBlurred()"
            >
                <div *ngIf="_DOM.notFound && group.noResults" class="dropdown-item no-results">
                    <ng-container *ngIf="group.noResults">
                        <ng-template *ngTemplateOutlet="group.noResults; context: {$implicit: _completer}"></ng-template>
                    </ng-container>
                </div>

                <div class="dropdown-item" *ngFor="let item of _items | keys; let i = index"
                     (click)="SelectItem(_items[item])" [ngClass]="_items[item].className">
                    <ng-container *ngIf="group.dropdownValue">
                        <ng-template
                            *ngTemplateOutlet="group.dropdownValue; context: {$implicit: _items[item], highlight: _items[item].title | highlight:_highlight}"></ng-template>
                    </ng-container>

                    <div *ngIf="!group.dropdownValue" [innerHTML]="_items[item].title | highlight:_highlight"></div>
                </div>
            </div>
        </div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
        .ng-autocomplete-inputs {
            position: relative;
        }

        .ng-autocomplete-inputs input[type=text]::-ms-clear,
        .ng-autocomplete-inputs input[type=text]::-ms-reveal {
            display: none;
            width: 0;
            height: 0;
        }

        .ng-autocomplete-inputs.completion-off {
            cursor: pointer;
        }

        .ng-autocomplete-inputs.completion-off input {
            pointer-events: none;
        }

        .ng-autocomplete-placeholder {
            pointer-events: none;
        }

        .ng-autocomplete-dropdown-icon {

        }

        .ng-autocomplete-dropdown .ng-dropdown {
            display: none;
        }

        .ng-autocomplete-dropdown .ng-dropdown.is-empty {
            display: none;
        }

        .ng-autocomplete-dropdown .ng-dropdown.open {
            display: block;
        }
    `]
            }] }
];
/** @nocollapse */
CompleterComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef }
];
CompleterComponent.propDecorators = {
    dropdown: [{ type: ViewChild, args: [NgDropdownDirective,] }],
    cleared: [{ type: Output }],
    selected: [{ type: Output }],
    noResult: [{ type: Output, args: ['no-result',] }],
    group: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CompleterComponent.prototype.dropdown;
    /** @type {?} */
    CompleterComponent.prototype.cleared;
    /** @type {?} */
    CompleterComponent.prototype.selected;
    /** @type {?} */
    CompleterComponent.prototype.noResult;
    /** @type {?} */
    CompleterComponent.prototype.group;
    /** @type {?} */
    CompleterComponent.prototype._change;
    /** @type {?} */
    CompleterComponent.prototype._items;
    /** @type {?} */
    CompleterComponent.prototype._completer;
    /** @type {?} */
    CompleterComponent.prototype._highlight;
    /** @type {?} */
    CompleterComponent.prototype._disabled;
    /** @type {?} */
    CompleterComponent.prototype._DOM;
    /**
     * @type {?}
     * @private
     */
    CompleterComponent.prototype._zone;
    /** @type {?} */
    CompleterComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,