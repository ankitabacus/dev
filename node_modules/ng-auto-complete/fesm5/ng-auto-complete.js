import { __awaiter, __generator, __assign } from 'tslib';
import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ChangeDetectorRef, Component, NgZone, ViewChild, ChangeDetectionStrategy, ViewChildren, Pipe, NgModule } from '@angular/core';
import { debounceTime } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AutocompleteItem = /** @class */ (function () {
    function AutocompleteItem(title, id, className, original) {
        this.title = title;
        this.id = id;
        this.className = className;
        this.original = original;
    }
    return AutocompleteItem;
}());
/**
 *
 * @param {?} items
 * @param {?} titleKey
 * @param {?=} childrenKey
 * @return {?}
 */
function SearchableAutoCompleteItems(items, titleKey, childrenKey) {
    if (childrenKey === void 0) { childrenKey = null; }
    return items.reduce(function (r, i) {
        /** @type {?} */
        var t = SearchableAutoCompleteString(i[titleKey], i.id);
        if (typeof r[t] === 'undefined') {
            r[t] = TransformToAutocompleteItem(i, titleKey, childrenKey);
        }
        return r;
    }, {});
}
/**
 *
 * @param {?} key
 * @param {?} id
 * @return {?}
 */
function SearchableAutoCompleteString(key, id) {
    return key.replace(/ /g, '_') + "_id_" + String(id);
}
/**
 *
 * @param {?} str
 * @return {?}
 */
function ComparableAutoCompleteString(str) {
    return str.replace(/_/g, ' ');
}
/**
 * object must have an ID
 * @param {?} object
 * @param {?} titleKey
 * @param {?=} childrenKey
 * @return {?}
 */
function TransformToAutocompleteItem(object, titleKey, childrenKey) {
    if (childrenKey === void 0) { childrenKey = null; }
    /** @type {?} */
    var item = new AutocompleteItem(object[titleKey], object.id, object.className, object);
    /**
     * if there are children, add these.
     */
    if (childrenKey !== null) {
        item.children = object[childrenKey];
    }
    return item;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AutocompleteGroup = /** @class */ (function () {
    function AutocompleteGroup() {
        this.async = null;
        this.removals = [];
    }
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @param {?} titleKey
     * @return {?}
     */
    AutocompleteGroup.prototype.SetNewValue = /**
     *
     * @param {?} value
     * @param {?} titleKey
     * @return {?}
     */
    function (value, titleKey) {
        /** @type {?} */
        var values = SearchableAutoCompleteItems(value, titleKey);
        this.SetCopy(values);
        /**
         *
         */
        this.value = this.FilterRemovals(this.removals, values);
    };
    /**
     *
     */
    /**
     *
     * @param {?} ids
     * @return {?}
     */
    AutocompleteGroup.prototype.Removables = /**
     *
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        this.removals = ids;
        /**
         *
         */
        this.value = this.FilterRemovals(this.removals, this._copy);
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    AutocompleteGroup.prototype.InitialValue = /**
     *
     * @return {?}
     */
    function () {
        this.value = this.FilterRemovals(this.removals, this.initialValue);
        /**
         *
         */
        this.SetCopy(this.initialValue);
    };
    /**
     *
     */
    /**
     *
     * @param {?} values
     * @return {?}
     */
    AutocompleteGroup.prototype.SetCopy = /**
     *
     * @param {?} values
     * @return {?}
     */
    function (values) {
        this._copy = Object.assign([], values);
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    AutocompleteGroup.prototype.SetValues = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = SearchableAutoCompleteItems(value, this.keys.titleKey, this.keys.childrenKey);
        /**
         *
         */
        this.initialValue = Object.assign({}, this.value);
        this.SetCopy(Object.assign({}, this.value));
    };
    /**
     *
     */
    /**
     *
     * @param {?} removals
     * @param {?} value
     * @return {?}
     */
    AutocompleteGroup.prototype.FilterRemovals = /**
     *
     * @param {?} removals
     * @param {?} value
     * @return {?}
     */
    function (removals, value) {
        /** @type {?} */
        var filtered = Object.assign({}, value);
        /** @type {?} */
        var key;
        /** @type {?} */
        var keys = [];
        for (key in filtered) {
            if (filtered.hasOwnProperty(key)) {
                removals.forEach(function (id) {
                    // Comparable string and ID
                    /** @type {?} */
                    var f = "_id_" + String(id);
                    /** @type {?} */
                    var c = key.substring(key.indexOf(f), key.length);
                    if (f === c) {
                        keys.push(key);
                    }
                });
            }
        }
        keys.forEach(function (k) {
            delete filtered[k];
        });
        return filtered;
    };
    return AutocompleteGroup;
}());
/**
 *
 * @template T
 * @param {?} placeholder
 * @param {?} key
 * @param {?} value
 * @param {?} keys
 * @param {?=} parent
 * @param {?=} completion
 * @param {?=} searchLength
 * @return {?}
 */
function CreateNewAutocompleteGroup(placeholder, key, value, keys, parent, completion, searchLength) {
    if (parent === void 0) { parent = ''; }
    if (completion === void 0) { completion = true; }
    if (searchLength === void 0) { searchLength = 2; }
    /** @type {?} */
    var group = new AutocompleteGroup();
    group.key = key;
    group.keys = keys;
    group.placeholder = placeholder;
    group.parent = parent;
    group.completion = completion;
    group.searchLength = searchLength;
    /**
     * Initial value needed, if we empty search box or want to clear it, it needs to be reset.
     * Setting copy, used if user wants to remove values (by id.). This _ list gets filtered.
     */
    group.SetValues(value);
    return group;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var UsedCodeList = {
    ArrowDown: 40,
    ArrowUp: 38,
    Enter: 13,
    Escape: 27,
    Tab: 9,
    MetaLeft: 91,
    AltLeft: 18,
    ControlLeft: 17,
    ShiftLeft: 16,
    ArrowLeft: 37,
    ArrowRight: 39,
    MetaRight: 93,
    AltRight: 18
};
/**
 *
 * @param {?} array
 * @return {?}
 */
function ReturnStringArrayByID(array) {
    return array.reduce(function (result, item) {
        result.push(item.id.toString());
        return result;
    }, []);
}
/**
 *
 * @param {?} removals
 * @param {?} list
 * @return {?}
 */
function FilterRemovals(removals, list) {
    return list.filter(function (item) {
        return removals.indexOf(item.id.toString()) <= -1;
    });
}
/**
 *
 * @return {?}
 */
function IsMobileOrTablet() {
    /** @type {?} */
    var isMobile = false;
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
        isMobile = true;
    }
    return isMobile;
}
/**
 * @param {?} code
 * @return {?}
 */
function NotUsedKey(code) {
    return typeof UsedCodeList[code] === 'undefined';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgDropdownDirective = /** @class */ (function () {
    function NgDropdownDirective(_eref) {
        this._eref = _eref;
        this.list = [];
        this.active = null;
        this.parentDetector = null;
        this.input = null;
        this.element = null;
        this.key = '';
        this.completion = true;
        this.hover = new EventEmitter();
        this.selected = new EventEmitter();
        this.closed = new EventEmitter();
        this._open = false;
        this._list = [];
        this._class = '';
        this.inputKeydownBind = this.inputKeydown.bind(this);
        this.documentKeydownBind = this.documentKeydown.bind(this);
        this.mouseoverListenerBind = this.mouseoverListener.bind(this);
    }
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.ngOnInit = /**
     *
     * @return {?}
     */
    function () {
        this._class = "dr-item-" + this.key + "-";
        if (!IsMobileOrTablet()) {
            this._eref.nativeElement.addEventListener('mouseover', this.mouseoverListenerBind);
        }
        /**
         *
         */
        this.PrepareList();
    };
    /**
     *
     */
    /**
     *
     * @param {?} changes
     * @return {?}
     */
    NgDropdownDirective.prototype.ngOnChanges = /**
     *
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (typeof changes['active'] !== 'undefined' && !changes['active'].firstChange) {
            this.PrepareList();
        }
        if (typeof changes['list'] !== 'undefined') {
            this.list = changes['list'].currentValue;
            /**
             *
             */
            this.PrepareList();
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} event
     * @return {?}
     */
    NgDropdownDirective.prototype.keyDown = /**
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopImmediatePropagation();
        event.stopPropagation();
        /**
         *
         */
        switch (event.code) {
            case 'ArrowDown':
                this.Open();
                /**
                 *
                 */
                this.SetActive(this.FindActive() + 1);
                this.DropdownFocusAreaDown();
                event.preventDefault();
                break;
            case 'ArrowUp':
                this.Open();
                /**
                 *
                 */
                this.SetActive(this.FindActive() - 1);
                this.DropdownFocusAreaUp();
                event.preventDefault();
                break;
            case 'Enter':
                this.EmitSelected();
                this.Close(null, true);
                if (this.RefExists()) {
                    this.input.blur();
                }
                event.preventDefault();
                break;
            case 'Escape':
                this.Close(null, true);
                if (this.RefExists()) {
                    this.input.blur();
                }
                event.preventDefault();
                break;
            case 'Tab':
                if (!event.shiftKey) {
                    this.EmitSelected();
                }
                this.Close(null, true);
                break;
            default:
                return;
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} event
     * @return {?}
     */
    NgDropdownDirective.prototype.OnMouseOver = /**
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Mouse didn't actually move, so no logic needed.
        if (event.movementX == 0 && event.movementY == 0) {
            return;
        }
        /**
         *
         * @type {?}
         */
        var el = event.target || event.srcElement;
        if (el.id.length > 0 && el.id.includes(this._class)) {
            this.SetActive(Number(el.id.slice(this._class.length, el.id.length)));
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.EmitSelected = /**
     *
     * @return {?}
     */
    function () {
        if (this.FindActive() > -1) {
            this.selected.emit(this._list[this.FindActive()].key);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.DropdownFocusAreaDown = /**
     *
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scroll = this._eref.nativeElement.offsetHeight + this._eref.nativeElement.scrollTop;
        /**
         *
         */
        if ((this.GetElement(this.FindActive()).offsetTop + this.GetElement(this.FindActive()).offsetHeight) > scroll) {
            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop - (this._eref.nativeElement.offsetHeight - this.GetElement(this.FindActive()).offsetHeight);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.DropdownFocusAreaUp = /**
     *
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scroll = this._eref.nativeElement.scrollTop;
        /**
         *
         */
        if (this.GetElement(this.FindActive()).offsetTop < scroll && scroll > 0) {
            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop;
        }
    };
    Object.defineProperty(NgDropdownDirective.prototype, "opened", {
        // =======================================================================//
        // ! Bindings                                                             //
        // =======================================================================//
        /**
         *
         */
        get: 
        // =======================================================================//
        // ! Bindings                                                             //
        // =======================================================================//
        /**
         *
         * @return {?}
         */
        function () {
            return this._open;
        },
        enumerable: true,
        configurable: true
    });
    // =======================================================================//
    // ! Listeners                                                            //
    // =======================================================================//
    /**
     *
     */
    // =======================================================================//
    // ! Listeners                                                            //
    // =======================================================================//
    /**
     *
     * @param {?} event
     * @param {?=} force
     * @return {?}
     */
    NgDropdownDirective.prototype.Close = 
    // =======================================================================//
    // ! Listeners                                                            //
    // =======================================================================//
    /**
     *
     * @param {?} event
     * @param {?=} force
     * @return {?}
     */
    function (event, force) {
        var _this = this;
        if (force === void 0) { force = false; }
        if (!this._open) {
            return;
        }
        /** @type {?} */
        var close = function () {
            _this._open = false;
            /**
             * Emit NULL so listening components know what to do.
             */
            _this.RemoveListeners();
            _this.ClearActive();
            _this.hover.emit(null);
            _this.closed.emit();
        };
        if (force) {
            close();
            return;
        }
        if ((this._open && (!this.element.contains(event.target)))) {
            close();
        }
    };
    /**
     *
     */
    /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    NgDropdownDirective.prototype.inputKeydown = /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.keyDown(event);
    };
    /**
     *
     */
    /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    NgDropdownDirective.prototype.documentKeydown = /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.keyDown(event);
    };
    /**
     *
     */
    /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    NgDropdownDirective.prototype.mouseoverListener = /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.OnMouseOver(event);
    };
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     */
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.RegisterListeners = 
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @return {?}
     */
    function () {
        if (this.RefExists()) {
            this.input.addEventListener('keydown', this.inputKeydownBind);
        }
        if (!this.completion) {
            document.addEventListener('keydown', this.documentKeydownBind);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.RemoveListeners = /**
     *
     * @return {?}
     */
    function () {
        if (this.RefExists()) {
            this.input.removeEventListener('keydown', this.inputKeydownBind);
        }
        if (!this.completion) {
            document.removeEventListener('keydown', this.documentKeydownBind);
        }
        if (!IsMobileOrTablet()) {
            this._eref.nativeElement.removeEventListener('mouseover', this.mouseoverListenerBind);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.Open = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            if (!_this._open && !_this._eref.nativeElement.classList.contains('is-initial-empty')) {
                _this.RegisterListeners();
                _this._open = true;
                _this.PrepareList();
                /**
                 *
                 */
                if (_this.FindActive() < 0) {
                    _this._eref.nativeElement.scrollTop = 0;
                }
                else {
                    _this._eref.nativeElement.scrollTop = _this.GetElement(_this.FindActive()).offsetHeight * _this.FindActive();
                }
                _this.parentDetector.detectChanges();
            }
        }, 0);
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.RefExists = /**
     *
     * @return {?}
     */
    function () {
        return typeof this.input !== 'undefined';
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.FindActive = /**
     *
     * @return {?}
     */
    function () {
        return this._list.reduce(function (result, item, index) {
            if (item.active) {
                result = index;
            }
            return result;
        }, -1);
    };
    /**
     *
     */
    /**
     *
     * @param {?} index
     * @return {?}
     */
    NgDropdownDirective.prototype.SetActive = /**
     *
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (index > this._list.length - 1 || index < 0)
            return;
        /**
         *
         */
        this.ClearActive();
        this._list[index].active = true;
        this.hover.emit(this._list[index].key);
        /**
         *
         */
        this.GetElement(index).classList.add('active');
    };
    /**
     *
     */
    /**
     *
     * @param {?} index
     * @return {?}
     */
    NgDropdownDirective.prototype.GetElement = /**
     *
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this._eref.nativeElement.children[index];
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.ClearActive = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._list.forEach(function (item, index) {
            item.active = false;
            /**
             *
             */
            _this.GetElement(index).classList.remove('active');
        });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.PrepareList = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._list = Object.keys(this.list).map(function (key) {
            return {
                key: key,
                active: _this.ActiveItem(key)
            };
        });
        /**
         *
         */
        this.PrepareChildrenList();
    };
    /**
     *
     */
    /**
     *
     * @param {?} item
     * @return {?}
     */
    NgDropdownDirective.prototype.ActiveItem = /**
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.active !== null && item === this.active;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.DetermineActiveClass = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._list.forEach(function (item, index) {
            if (typeof _this.GetElement(index) === 'undefined') {
                return;
            }
            /**
             *
             */
            _this.GetElement(index).classList.remove('active');
            if (item.active)
                _this.GetElement(index).classList.add('active');
        });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.PrepareChildrenList = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var list = this._eref.nativeElement.children;
        setTimeout(function () {
            for (var i = 0; i < list.length; i++) {
                list[i].id = _this._class + i;
            }
        }, 0);
        /**
         *
         */
        this.DetermineActiveClass();
    };
    /**
     *
     */
    /**
     *
     * @param {?} object
     * @return {?}
     */
    NgDropdownDirective.prototype.DeReference = /**
     *
     * @param {?} object
     * @return {?}
     */
    function (object) {
        var item = object.item;
        /**
         *
         */
        return Object.assign({}, __assign({}, item));
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgDropdownDirective.prototype.ngOnDestroy = /**
     *
     * @return {?}
     */
    function () {
        this.RemoveListeners();
    };
    NgDropdownDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngDropdown]'
                },] }
    ];
    /** @nocollapse */
    NgDropdownDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgDropdownDirective.propDecorators = {
        list: [{ type: Input }],
        active: [{ type: Input }],
        parentDetector: [{ type: Input }],
        input: [{ type: Input }],
        element: [{ type: Input }],
        key: [{ type: Input }],
        completion: [{ type: Input }],
        hover: [{ type: Output }],
        selected: [{ type: Output }],
        closed: [{ type: Output }],
        opened: [{ type: HostBinding, args: ['class.open',] }],
        Close: [{ type: HostListener, args: ['document:click', ['$event'],] }]
    };
    return NgDropdownDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CompleterComponent = /** @class */ (function () {
    function CompleterComponent(_zone, cd) {
        this._zone = _zone;
        this.cd = cd;
        this.cleared = new EventEmitter();
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = (/** @type {?} */ ({}));
        this._change = new Subject();
        this._items = {};
        this._completer = '';
        this._highlight = '';
        this._disabled = false;
        this._DOM = {
            notFound: (/** @type {?} */ (false)),
            empty: (/** @type {?} */ (false)),
            placeholder: (/** @type {?} */ (null)),
            selected: (/** @type {?} */ ('')),
            isLoading: (/** @type {?} */ (false))
        };
    }
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ngOnInit = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            _this._change.pipe(debounceTime(300))
                .subscribe(function (value) {
                _this._zone.run(function () {
                    if (_this.group.async !== null) {
                        _this.RunAsyncFunction(value);
                    }
                    else {
                        _this.OnModelChange(value);
                    }
                    _this.cd.detectChanges();
                });
            });
        });
        this.SetItems();
    };
    /**
     * Only used when completion is off.
     */
    /**
     * Only used when completion is off.
     * @return {?}
     */
    CompleterComponent.prototype.RegisterClick = /**
     * Only used when completion is off.
     * @return {?}
     */
    function () {
        if (!this.group.completion) {
            this.SwitchDropdownState();
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.DropdownArray = /**
     *
     * @return {?}
     */
    function () {
        if (this.group.completion) {
            this.SwitchDropdownState();
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.SwitchDropdownState = /**
     *
     * @return {?}
     */
    function () {
        if (this.dropdown._open) {
            this.CloseDropdown();
            return;
        }
        /**
         *
         */
        this.OpenDropdown();
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.CloseDropdown = /**
     *
     * @return {?}
     */
    function () {
        this.dropdown._open = false;
        /**
         *
         */
        this._DOM.placeholder = null;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.OpenDropdown = /**
     *
     * @return {?}
     */
    function () {
        this.dropdown.Open();
        /**
         *
         */
        this._DOM.placeholder = null;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.SetItems = /**
     *
     * @return {?}
     */
    function () {
        this._items = this.group.value;
        this.IsInitialEmpty();
    };
    /**
     *
     */
    /**
     *
     * @param {?} item
     * @return {?}
     */
    CompleterComponent.prototype.SelectItem = /**
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var i;
        if (typeof item === 'string') {
            i = this._items[item];
            this._DOM.selected = item;
        }
        else {
            i = item;
            this._DOM.selected = SearchableAutoCompleteString(item.title, item.id);
        }
        this._completer = i.title;
        this._highlight = '';
        this.dropdown.Close(null, true);
        this.selected.emit({ group: { key: this.group.key }, item: i });
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.RunAsyncFunction = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return __awaiter(this, void 0, void 0, function () {
            var values;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._completer = value;
                        this._highlight = value;
                        this._DOM.selected = null;
                        if (!(value.length === 0)) return [3 /*break*/, 1];
                        this.group.InitialValue();
                        this.ClearModel();
                        this.dropdown.Close('', true);
                        return [3 /*break*/, 3];
                    case 1:
                        if (!(value.length > this.group.searchLength)) return [3 /*break*/, 3];
                        this._DOM.isLoading = true;
                        return [4 /*yield*/, this.group.async(value)];
                    case 2:
                        values = _a.sent();
                        this.group.SetNewValue(values, this.group.keys.titleKey);
                        this._DOM.isLoading = false;
                        this._items = this.group.value;
                        this.EmptySearch(this._items, value);
                        // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
                        this.IsInitialEmpty();
                        this.dropdown.Open();
                        _a.label = 3;
                    case 3:
                        this.cd.detectChanges();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.OnModelChange = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._completer = value;
        this._highlight = value;
        this._DOM.selected = null;
        if (value.length === 0) {
            this.ClearModel();
        }
        else if (value.length > this.group.searchLength) {
            this.CompareItemsAndSet(value);
        }
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ClearModel = /**
     *
     * @return {?}
     */
    function () {
        this._DOM.selected = null;
        this._DOM.notFound = false;
        this.cleared.emit(this.group.key);
    };
    /**
     *
     */
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompleterComponent.prototype.CompareItemsAndSet = /**
     *
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var obj = {};
        for (var key in this.group.value) {
            if (ComparableAutoCompleteString(key).toLowerCase().indexOf(value.toLowerCase()) > -1) {
                obj[key] = this.group.value[key];
            }
        }
        this._items = obj;
        this.EmptySearch(this._items, value);
        // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
        this.IsInitialEmpty();
        this.dropdown.Open();
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.OnInputBlurred = /**
     *
     * @return {?}
     */
    function () {
        if (!this.HasChosenValue()) {
            /**
             * Let component know completer input has been cleared -
             * this function shows the list again, also resets children, if chosen.
             */
            this.OnModelChange('');
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} item
     * @return {?}
     */
    CompleterComponent.prototype.OnHoverDropdownItem = /**
     *
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (typeof item === 'string') {
            this._DOM.placeholder = this._items[item];
            return;
        }
        if (item == null) {
            this._DOM.placeholder = null;
            return;
        }
        this._DOM.placeholder = item;
    };
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     * @return {?}
     */
    CompleterComponent.prototype.IsInitialEmpty = 
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     * @return {?}
     */
    function () {
        if (Object.keys(this._items).length === 0 && this._completer.length === 0) {
            this._DOM.empty = true;
            return;
        }
        this._DOM.empty = false;
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.HasChosenValue = /**
     *
     * @return {?}
     */
    function () {
        return this._DOM.selected !== null;
    };
    /**
     *
     */
    /**
     *
     * @param {?} obj
     * @param {?} query
     * @return {?}
     */
    CompleterComponent.prototype.EmptySearch = /**
     *
     * @param {?} obj
     * @param {?} query
     * @return {?}
     */
    function (obj, query) {
        if (Object.keys(obj).length > 0) {
            this._DOM.notFound = false;
            return;
        }
        this._DOM.notFound = true;
        this.noResult.emit({ group: { key: this.group.key }, query: query });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    CompleterComponent.prototype.ClearValue = /**
     *
     * @return {?}
     */
    function () {
        this._completer = '';
        this._DOM.selected = null;
        this.group.InitialValue();
        this.IsInitialEmpty();
        /**
         *
         */
        this.selected.emit({ group: { key: this.group.key }, item: null });
    };
    CompleterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-completer',
                    template: "\n        <div #element class=\"ng-autocomplete-dropdown\"\n             [ngClass]=\"{'open': dropdown._open, 'is-loading': _DOM.isLoading, 'is-async': group.async !== null}\">\n\n            <!--GROUP: {{group.key}}-->\n\n            <div class=\"ng-autocomplete-inputs\" (click)=\"RegisterClick()\"\n                 [ngClass]=\"{'completion-off': !group.completion}\">\n                <span class=\"ng-autocomplete-placeholder\"\n                      *ngIf=\"_DOM.placeholder\">\n                  <ng-container *ngIf=\"group.placeholderValue\">\n                      <ng-template *ngTemplateOutlet=\"group.placeholderValue; context: {$implicit: _DOM.placeholder}\"></ng-template>\n                  </ng-container>\n                  <ng-template [ngIf]=\"!group.placeholderValue\">\n                      {{_DOM.placeholder.title}}\n                  </ng-template>\n                </span>\n                <input #input type=\"text\" [placeholder]=\"group.placeholder\" name=\"completer\" [ngModel]=\"_completer\"\n                       (ngModelChange)=\"_change.next($event);\"\n                       [value]=\"_completer\"\n                       [tabIndex]=\"_disabled ? -1 : 0\"\n                       autocomplete=\"new-password\"\n                       (focus)=\"OpenDropdown()\" class=\"ng-autocomplete-input\">\n\n                <span [ngClass]=\"{'open': dropdown._open}\" class=\"ng-autocomplete-dropdown-icon\"\n                      (click)=\"DropdownArray()\"></span>\n            </div>\n\n            <div class=\"ng-dropdown\" ngDropdown [list]=\"_items\" [element]=\"element\" [input]=\"input\"\n                 [ngClass]=\"{'is-initial-empty': _DOM.empty}\"\n                 [active]=\"_DOM.selected\" [key]=\"group.key\"\n                 [completion]=\"group.completion\"\n                 [parentDetector]=\"cd\"\n                 (hover)=\"OnHoverDropdownItem($event)\"\n                 (selected)=\"SelectItem($event)\"\n                 (closed)=\"OnInputBlurred()\"\n            >\n                <div *ngIf=\"_DOM.notFound && group.noResults\" class=\"dropdown-item no-results\">\n                    <ng-container *ngIf=\"group.noResults\">\n                        <ng-template *ngTemplateOutlet=\"group.noResults; context: {$implicit: _completer}\"></ng-template>\n                    </ng-container>\n                </div>\n\n                <div class=\"dropdown-item\" *ngFor=\"let item of _items | keys; let i = index\"\n                     (click)=\"SelectItem(_items[item])\" [ngClass]=\"_items[item].className\">\n                    <ng-container *ngIf=\"group.dropdownValue\">\n                        <ng-template\n                            *ngTemplateOutlet=\"group.dropdownValue; context: {$implicit: _items[item], highlight: _items[item].title | highlight:_highlight}\"></ng-template>\n                    </ng-container>\n\n                    <div *ngIf=\"!group.dropdownValue\" [innerHTML]=\"_items[item].title | highlight:_highlight\"></div>\n                </div>\n            </div>\n        </div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n        .ng-autocomplete-inputs {\n            position: relative;\n        }\n\n        .ng-autocomplete-inputs input[type=text]::-ms-clear,\n        .ng-autocomplete-inputs input[type=text]::-ms-reveal {\n            display: none;\n            width: 0;\n            height: 0;\n        }\n\n        .ng-autocomplete-inputs.completion-off {\n            cursor: pointer;\n        }\n\n        .ng-autocomplete-inputs.completion-off input {\n            pointer-events: none;\n        }\n\n        .ng-autocomplete-placeholder {\n            pointer-events: none;\n        }\n\n        .ng-autocomplete-dropdown-icon {\n\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown {\n            display: none;\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown.is-empty {\n            display: none;\n        }\n\n        .ng-autocomplete-dropdown .ng-dropdown.open {\n            display: block;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    CompleterComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    CompleterComponent.propDecorators = {
        dropdown: [{ type: ViewChild, args: [NgDropdownDirective,] }],
        cleared: [{ type: Output }],
        selected: [{ type: Output }],
        noResult: [{ type: Output, args: ['no-result',] }],
        group: [{ type: Input }]
    };
    return CompleterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgAutoCompleteComponent = /** @class */ (function () {
    function NgAutoCompleteComponent(cdr) {
        this.cdr = cdr;
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = [];
        this.key = '';
        this.classes = [];
        this._viewHasBeenInit = false;
        this._viewInitSubject = new Subject();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ngOnInit = /**
     *
     * @return {?}
     */
    function () {
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ngAfterViewChecked = /**
     *
     * @return {?}
     */
    function () {
        if (!this._viewHasBeenInit) {
            /** @type {?} */
            var el = this.init.nativeElement.querySelector('.after-view-init');
            if (window.getComputedStyle(el).length > 0) {
                this._viewHasBeenInit = true;
                this._viewInitSubject.next(true);
            }
        }
    };
    /**
     *
     */
    /**
     *
     * @param {?} selected
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ListenToSelected = /**
     *
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        this.selected.emit(selected);
        /**
         *
         */
        this.SetChildren(selected);
    };
    /**
     *
     */
    /**
     *
     * @param {?} group
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.NoResult = /**
     *
     * @param {?} group
     * @return {?}
     */
    function (group) {
        this.noResult.emit(group);
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.InputCleared = /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        this.group.forEach(function (group) {
            if (group.key === key || group.parent === key) {
                _this.ResetInput(group.key);
            }
        });
        /**
         * Items may have changed, need to te re-set list in completer components.
         */
        this.TriggerChange();
    };
    /**
     *
     */
    /**
     *
     * @param {?} selected
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetChildren = /**
     *
     * @param {?} selected
     * @return {?}
     */
    function (selected) {
        var _this = this;
        this.group.forEach(function (item) {
            if (item.parent == selected.group.key) {
                _this.ResetInput(item.key);
                /**
                 *
                 */
                if (selected.item !== null && typeof selected.item.children !== 'undefined') {
                    item.SetNewValue(selected.item.children, selected.group.keys.titleKey);
                }
            }
        });
        /**
         * Items may have changed, need to te re-set list in completer components.
         */
        this.TriggerChange();
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.TriggerChange = /**
     *
     * @return {?}
     */
    function () {
        this.completers.forEach(function (completer) {
            completer.SetItems();
        });
    };
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     */
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.GetInput = 
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.completers.reduce(function (result, completer) {
            if (completer.group.key === key) {
                result = completer;
            }
            return result;
        }, (/** @type {?} */ ({})));
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} f
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SubscribeInput = /**
     *
     * @param {?} key
     * @param {?} f
     * @return {?}
     */
    function (key, f) {
        var _this = this;
        if (this._viewHasBeenInit) {
            /** @type {?} */
            var completer = this.GetInput(key);
            /**
             *
             */
            f(completer);
            return;
        }
        this._viewInitSubject.subscribe(function (_bool) {
            /** @type {?} */
            var completer = _this.GetInput(key);
            setTimeout(function () {
                f(completer);
            });
            _this._viewInitSubject.unsubscribe();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ResetInput = /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.SubscribeInput(key, function (completer) {
            completer.ClearValue();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} values
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetValues = /**
     *
     * @param {?} key
     * @param {?} values
     * @return {?}
     */
    function (key, values) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer.group.SetValues(values);
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetTemplate = /**
     *
     * @param {?} key
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    function (key, type, template) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer.group[type] = template;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} promise
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetAsync = /**
     *
     * @param {?} key
     * @param {?} promise
     * @return {?}
     */
    function (key, promise) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer.group.async = promise;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetEnable = /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer._disabled = false;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SetDisable = /**
     *
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer._disabled = true;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} id
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.SelectItem = /**
     *
     * @param {?} key
     * @param {?} id
     * @return {?}
     */
    function (key, id) {
        this.SubscribeInput(key, function (completer) {
            Object.keys(completer._items).forEach(function (key) {
                /** @type {?} */
                var f = "_id_" + String(id);
                /** @type {?} */
                var c = key.substring(key.indexOf(f), key.length);
                if (f === c) {
                    completer.SelectItem(completer._items[key]);
                }
            });
        });
    };
    /**
     *
     */
    /**
     *
     * @param {?} key
     * @param {?} ids
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.RemovableValues = /**
     *
     * @param {?} key
     * @param {?} ids
     * @return {?}
     */
    function (key, ids) {
        var _this = this;
        this.SubscribeInput(key, function (completer) {
            completer.group.Removables(ReturnStringArrayByID(ids));
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            _this.TriggerChange();
        });
    };
    /**
     *
     */
    /**
     *
     * @return {?}
     */
    NgAutoCompleteComponent.prototype.ResetInputs = /**
     *
     * @return {?}
     */
    function () {
        var _this = this;
        this.group.forEach(function (item) {
            _this.ResetInput(item.key);
        });
    };
    // =======================================================================//
    // ! Static (utils)                                                       //
    // =======================================================================//
    /**
     *
     */
    // =======================================================================//
    // ! Static (utils)                                                       //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @param {?} list
     * @return {?}
     */
    NgAutoCompleteComponent.FindCompleter = 
    // =======================================================================//
    // ! Static (utils)                                                       //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @param {?} list
     * @return {?}
     */
    function (key, list) {
        /** @type {?} */
        var completer = list.filter(function (completer) {
            return key === completer.key;
        });
        if (typeof completer[0] !== 'undefined') {
            return completer[0];
        }
        return null;
    };
    NgAutoCompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-auto-complete',
                    template: "\n        <div #init style=\"display: none;\"><span class=\"after-view-init\"></span></div>\n        <ng-completer [ngClass]=\"classes\" *ngFor=\"let item of group\" (cleared)=\"InputCleared($event)\"\n                      (no-result)=\"NoResult($event)\"\n                      (selected)=\"ListenToSelected($event)\"\n                      [group]=\"item\"></ng-completer>\n    "
                }] }
    ];
    /** @nocollapse */
    NgAutoCompleteComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NgAutoCompleteComponent.propDecorators = {
        completers: [{ type: ViewChildren, args: [CompleterComponent,] }],
        init: [{ type: ViewChild, args: ['init',] }],
        selected: [{ type: Output }],
        noResult: [{ type: Output, args: ['no-result',] }],
        group: [{ type: Input }],
        key: [{ type: Input }],
        classes: [{ type: Input }]
    };
    return NgAutoCompleteComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HighlightPipe = /** @class */ (function () {
    function HighlightPipe() {
    }
    /**
     * @param {?} text
     * @param {?} search
     * @return {?}
     */
    HighlightPipe.prototype.transform = /**
     * @param {?} text
     * @param {?} search
     * @return {?}
     */
    function (text, search) {
        if (search.length > 0) {
            return this.Strip(text).replace(new RegExp("" + this.EscapeMatch(search), 'gi'), function (match) {
                return "<span class=\"dropdown-item-highlight\">" + match + "</span>";
            });
        }
        else {
            return text;
        }
    };
    /**
     * @param {?} match
     * @return {?}
     */
    HighlightPipe.prototype.EscapeMatch = /**
     * @param {?} match
     * @return {?}
     */
    function (match) {
        /** @type {?} */
        var entityMap = {
            '&': '\\&',
            '<': '\\<',
            '>': '\\>',
            '/': '\\/',
            '=': '\\=',
            '+': '\\+',
            '-': '\\-',
            '#': '\\#',
            '!': '\\!',
            '@': '\\@',
            '$': '\\$',
            '%': '\\%',
            '^': '\\^',
            '*': '\\*',
            '(': '\\(',
            ')': '\\)',
        };
        return String(match).replace(/[&<>"'`=+\/]/g, function (s) {
            return entityMap[s];
        });
    };
    /**
     * @param {?=} str_in
     * @return {?}
     */
    HighlightPipe.prototype.Strip = /**
     * @param {?=} str_in
     * @return {?}
     */
    function (str_in) {
        if (str_in === void 0) { str_in = ''; }
        return str_in.replace(/<[^>]*>/g, '');
    };
    HighlightPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'highlight'
                },] }
    ];
    return HighlightPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KeyValuePipe = /** @class */ (function () {
    function KeyValuePipe() {
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    KeyValuePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        /** @type {?} */
        var keys = [];
        for (var key in value) {
            if (value.hasOwnProperty(key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    KeyValuePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'keys'
                },] }
    ];
    return KeyValuePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PipeModule = /** @class */ (function () {
    function PipeModule() {
    }
    /**
     * @return {?}
     */
    PipeModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: PipeModule,
            providers: [],
        };
    };
    PipeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [HighlightPipe, KeyValuePipe],
                    exports: [HighlightPipe, KeyValuePipe],
                },] }
    ];
    return PipeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgAutoCompleteModule = /** @class */ (function () {
    function NgAutoCompleteModule() {
    }
    NgAutoCompleteModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PipeModule.forRoot()
                    ],
                    exports: [
                        NgAutoCompleteComponent,
                        CompleterComponent,
                    ],
                    declarations: [
                        NgAutoCompleteComponent,
                        CompleterComponent,
                        NgDropdownDirective
                    ]
                },] }
    ];
    return NgAutoCompleteModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgAutoCompleteComponent, NgAutoCompleteModule, PipeModule, SearchableAutoCompleteItems, SearchableAutoCompleteString, ComparableAutoCompleteString, TransformToAutocompleteItem, AutocompleteItem, CreateNewAutocompleteGroup, AutocompleteGroup, ReturnStringArrayByID, FilterRemovals, IsMobileOrTablet, NotUsedKey, CompleterComponent as ɵa, NgDropdownDirective as ɵb, HighlightPipe as ɵc, KeyValuePipe as ɵd };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYXV0by1jb21wbGV0ZS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmctYXV0by1jb21wbGV0ZS9saWIvY2xhc3Nlcy9BdXRvY29tcGxldGVJdGVtLnRzIiwibmc6Ly9uZy1hdXRvLWNvbXBsZXRlL2xpYi9jbGFzc2VzL0F1dG9jb21wbGV0ZUdyb3VwLnRzIiwibmc6Ly9uZy1hdXRvLWNvbXBsZXRlL2xpYi91dGlscy91dGlscy50cyIsIm5nOi8vbmctYXV0by1jb21wbGV0ZS9saWIvZHJvcGRvd24vbmctZHJvcGRvd24uZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy1hdXRvLWNvbXBsZXRlL2xpYi9jb21wbGV0ZXIvY29tcGxldGVyLmNvbXBvbmVudC50cyIsIm5nOi8vbmctYXV0by1jb21wbGV0ZS9saWIvbmctYXV0by1jb21wbGV0ZS5jb21wb25lbnQudHMiLCJuZzovL25nLWF1dG8tY29tcGxldGUvbGliL3BpcGVzL2hpZ2hsaWdodC50cyIsIm5nOi8vbmctYXV0by1jb21wbGV0ZS9saWIvcGlwZXMva2V5LXZhbHVlLnRzIiwibmc6Ly9uZy1hdXRvLWNvbXBsZXRlL2xpYi9waXBlcy9waXBlcy5tb2R1bGUudHMiLCJuZzovL25nLWF1dG8tY29tcGxldGUvbGliL25nLWF1dG8tY29tcGxldGUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU3RyaXBwZWRBdXRvY29tcGxldGVHcm91cCB7XG4gICAgZ3JvdXA6IHsga2V5OiBzdHJpbmcgfTtcbiAgICBpdGVtOiBBdXRvY29tcGxldGVJdGVtO1xufVxuXG5leHBvcnQgY2xhc3MgQXV0b2NvbXBsZXRlSXRlbSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBpZD86IHN0cmluZyB8IG51bWJlcjtcbiAgICBjaGlsZHJlbjogYW55W107XG4gICAgb3JpZ2luYWw6IGFueTtcbiAgICBjbGFzc05hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHRpdGxlOiBzdHJpbmcsIGlkOiBzdHJpbmcgfCBudW1iZXIsIGNsYXNzTmFtZTogc3RyaW5nLCBvcmlnaW5hbDogYW55KSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgdGhpcy5vcmlnaW5hbCA9IG9yaWdpbmFsO1xuICAgIH1cbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gU2VhcmNoYWJsZUF1dG9Db21wbGV0ZUl0ZW1zKGl0ZW1zOiB7IGlkPzogc3RyaW5nIHwgbnVtYmVyOyBbdmFsdWU6IHN0cmluZ106IGFueSB9W10sIHRpdGxlS2V5OiBzdHJpbmcsIGNoaWxkcmVuS2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbCk6IHsgW3ZhbHVlOiBzdHJpbmddOiBBdXRvY29tcGxldGVJdGVtIH0ge1xuICAgIHJldHVybiBpdGVtcy5yZWR1Y2UoZnVuY3Rpb24gKHIsIGkpIHtcbiAgICAgICAgY29uc3QgdCA9IFNlYXJjaGFibGVBdXRvQ29tcGxldGVTdHJpbmcoaVt0aXRsZUtleV0sIGkuaWQpO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygclt0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJbdF0gPSBUcmFuc2Zvcm1Ub0F1dG9jb21wbGV0ZUl0ZW0oaSwgdGl0bGVLZXksIGNoaWxkcmVuS2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByO1xuICAgIH0sIHt9KTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gU2VhcmNoYWJsZUF1dG9Db21wbGV0ZVN0cmluZyhrZXk6IHN0cmluZywgaWQ6IHN0cmluZyB8IG51bWJlcikge1xuICAgIHJldHVybiBgJHtrZXkucmVwbGFjZSgvIC9nLCAnXycpfV9pZF8ke1N0cmluZyhpZCl9YDtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcGFyYWJsZUF1dG9Db21wbGV0ZVN0cmluZyhzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXy9nLCAnICcpO1xufVxuXG4vKipcbiAqIG9iamVjdCBtdXN0IGhhdmUgYW4gSURcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNmb3JtVG9BdXRvY29tcGxldGVJdGVtKG9iamVjdDogeyBpZD86IHN0cmluZyB8IG51bWJlcjsgW3ZhbHVlOiBzdHJpbmddOiBhbnksIGNsYXNzTmFtZT86IHN0cmluZyB9LCB0aXRsZUtleTogc3RyaW5nLCBjaGlsZHJlbktleTogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcbiAgICBjb25zdCBpdGVtID0gbmV3IEF1dG9jb21wbGV0ZUl0ZW0ob2JqZWN0W3RpdGxlS2V5XSwgb2JqZWN0LmlkLCBvYmplY3QuY2xhc3NOYW1lLCBvYmplY3QpO1xuXG4gICAgLyoqXG4gICAgICogaWYgdGhlcmUgYXJlIGNoaWxkcmVuLCBhZGQgdGhlc2UuXG4gICAgICovXG4gICAgaWYgKGNoaWxkcmVuS2V5ICE9PSBudWxsKSB7XG4gICAgICAgIGl0ZW0uY2hpbGRyZW4gPSBvYmplY3RbY2hpbGRyZW5LZXldO1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtO1xufVxuIiwiaW1wb3J0IHsgQXV0b2NvbXBsZXRlSXRlbSwgU2VhcmNoYWJsZUF1dG9Db21wbGV0ZUl0ZW1zIH0gZnJvbSAnLi9BdXRvY29tcGxldGVJdGVtJztcbmltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBBdXRvY29tcGxldGVHcm91cCB7XG4gICAgaW5pdGlhbFZhbHVlOiB7IFt2YWx1ZTogc3RyaW5nXTogQXV0b2NvbXBsZXRlSXRlbSB9O1xuXG4gICAga2V5OiBzdHJpbmc7XG4gICAga2V5czogeyB0aXRsZUtleTogc3RyaW5nLCBjaGlsZHJlbktleTogc3RyaW5nIHwgbnVsbCB9O1xuICAgIHZhbHVlOiB7IFt2YWx1ZTogc3RyaW5nXTogQXV0b2NvbXBsZXRlSXRlbSB9O1xuICAgIHJlbW92ZTogc3RyaW5nW107XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBwYXJlbnQ6IHN0cmluZztcbiAgICBjb21wbGV0aW9uOiBib29sZWFuO1xuICAgIHNlYXJjaExlbmd0aDogbnVtYmVyO1xuICAgIGFzeW5jOiAoc3RyOiBzdHJpbmcpID0+IFByb21pc2U8eyBpZDogc3RyaW5nIHwgbnVtYmVyOyBbdmFsdWU6IHN0cmluZ106IGFueSB9W10+ID0gbnVsbDtcblxuICAgIC8vIFRlbXBsYXRlc1xuICAgIG5vUmVzdWx0czogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBkcm9wZG93blZhbHVlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHBsYWNlaG9sZGVyVmFsdWU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICBwcml2YXRlIHJlbW92YWxzOiBzdHJpbmdbXSA9IFtdO1xuICAgIHByaXZhdGUgX2NvcHk6IHsgW3ZhbHVlOiBzdHJpbmddOiBBdXRvY29tcGxldGVJdGVtIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFNldE5ld1ZhbHVlKHZhbHVlOiB7IGlkOiBzdHJpbmcgfCBudW1iZXI7IFt2YWx1ZTogc3RyaW5nXTogYW55IH1bXSwgdGl0bGVLZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBTZWFyY2hhYmxlQXV0b0NvbXBsZXRlSXRlbXModmFsdWUsIHRpdGxlS2V5KTtcbiAgICAgICAgdGhpcy5TZXRDb3B5KHZhbHVlcyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5GaWx0ZXJSZW1vdmFscyh0aGlzLnJlbW92YWxzLCB2YWx1ZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgUmVtb3ZhYmxlcyhpZHM6IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMucmVtb3ZhbHMgPSBpZHM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5GaWx0ZXJSZW1vdmFscyh0aGlzLnJlbW92YWxzLCB0aGlzLl9jb3B5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIEluaXRpYWxWYWx1ZSgpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuRmlsdGVyUmVtb3ZhbHModGhpcy5yZW1vdmFscywgdGhpcy5pbml0aWFsVmFsdWUpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5TZXRDb3B5KHRoaXMuaW5pdGlhbFZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFNldENvcHkodmFsdWVzOiB7IFt2YWx1ZTogc3RyaW5nXTogQXV0b2NvbXBsZXRlSXRlbSB9KSB7XG4gICAgICAgIHRoaXMuX2NvcHkgPSBPYmplY3QuYXNzaWduKFtdLCB2YWx1ZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgU2V0VmFsdWVzKHZhbHVlOiB7IGlkPzogc3RyaW5nIHwgbnVtYmVyOyBbdmFsdWU6IHN0cmluZ106IGFueSB9W10pIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFNlYXJjaGFibGVBdXRvQ29tcGxldGVJdGVtcyh2YWx1ZSwgdGhpcy5rZXlzLnRpdGxlS2V5LCB0aGlzLmtleXMuY2hpbGRyZW5LZXkpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbml0aWFsVmFsdWUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnZhbHVlKTtcbiAgICAgICAgdGhpcy5TZXRDb3B5KE9iamVjdC5hc3NpZ24oe30sIHRoaXMudmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIEZpbHRlclJlbW92YWxzKHJlbW92YWxzOiBhbnlbXSwgdmFsdWU6IHsgW3ZhbHVlOiBzdHJpbmddOiBBdXRvY29tcGxldGVJdGVtIH0pOiB7IFt2YWx1ZTogc3RyaW5nXTogQXV0b2NvbXBsZXRlSXRlbSB9IHtcbiAgICAgICAgbGV0IGZpbHRlcmVkID0gT2JqZWN0LmFzc2lnbih7fSwgdmFsdWUpO1xuXG4gICAgICAgIGxldCBrZXksIGtleXMgPSBbXTtcbiAgICAgICAgZm9yIChrZXkgaW4gZmlsdGVyZWQpIHtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJlZC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZhbHMuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29tcGFyYWJsZSBzdHJpbmcgYW5kIElEXG4gICAgICAgICAgICAgICAgICAgIGxldCBmID0gYF9pZF8ke1N0cmluZyhpZCl9YDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGMgPSBrZXkuc3Vic3RyaW5nKGtleS5pbmRleE9mKGYpLCBrZXkubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gYykge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAga2V5cy5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgICAgICBkZWxldGUgZmlsdGVyZWRba107XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgICB9XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZU5ld0F1dG9jb21wbGV0ZUdyb3VwPFQ+KHBsYWNlaG9sZGVyOiBzdHJpbmcsIGtleTogc3RyaW5nLCB2YWx1ZTogeyBpZD86IHN0cmluZyB8IG51bWJlcjsgW3ZhbHVlOiBzdHJpbmddOiBhbnkgfVtdLCBrZXlzOiB7IHRpdGxlS2V5OiBzdHJpbmcsIGNoaWxkcmVuS2V5OiBzdHJpbmcgfCBudWxsIH0sIHBhcmVudDogc3RyaW5nID0gJycsIGNvbXBsZXRpb246IGJvb2xlYW4gPSB0cnVlLCBzZWFyY2hMZW5ndGg6IG51bWJlciA9IDIpOiBBdXRvY29tcGxldGVHcm91cCB7XG4gICAgY29uc3QgZ3JvdXAgPSBuZXcgQXV0b2NvbXBsZXRlR3JvdXAoKTtcblxuICAgIGdyb3VwLmtleSA9IGtleTtcbiAgICBncm91cC5rZXlzID0ga2V5cztcbiAgICBncm91cC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgIGdyb3VwLnBhcmVudCA9IHBhcmVudDtcbiAgICBncm91cC5jb21wbGV0aW9uID0gY29tcGxldGlvbjtcbiAgICBncm91cC5zZWFyY2hMZW5ndGggPSBzZWFyY2hMZW5ndGg7XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsIHZhbHVlIG5lZWRlZCwgaWYgd2UgZW1wdHkgc2VhcmNoIGJveCBvciB3YW50IHRvIGNsZWFyIGl0LCBpdCBuZWVkcyB0byBiZSByZXNldC5cbiAgICAgKiBTZXR0aW5nIGNvcHksIHVzZWQgaWYgdXNlciB3YW50cyB0byByZW1vdmUgdmFsdWVzIChieSBpZC4pLiBUaGlzIF8gbGlzdCBnZXRzIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGdyb3VwLlNldFZhbHVlcyh2YWx1ZSk7XG5cbiAgICByZXR1cm4gZ3JvdXA7XG59XG4iLCJpbXBvcnQgeyBBdXRvY29tcGxldGVJdGVtIH0gZnJvbSAnLi4vY2xhc3Nlcy9BdXRvY29tcGxldGVJdGVtJztcblxuY29uc3QgVXNlZENvZGVMaXN0ID0ge1xuICAgIEFycm93RG93bjogICAgICA0MCxcbiAgICBBcnJvd1VwOiAgICAgICAgMzgsXG4gICAgRW50ZXI6ICAgICAgICAgIDEzLFxuICAgIEVzY2FwZTogICAgICAgICAyNyxcbiAgICBUYWI6ICAgICAgICAgICAgOSxcbiAgICBNZXRhTGVmdDogICAgICAgOTEsXG4gICAgQWx0TGVmdDogICAgICAgIDE4LFxuICAgIENvbnRyb2xMZWZ0OiAgICAxNyxcbiAgICBTaGlmdExlZnQ6ICAgICAgMTYsXG4gICAgQXJyb3dMZWZ0OiAgICAgIDM3LFxuICAgIEFycm93UmlnaHQ6ICAgICAzOSxcbiAgICBNZXRhUmlnaHQ6ICAgICAgOTMsXG4gICAgQWx0UmlnaHQ6ICAgICAgIDE4XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEdyb3VwTm9SZXN1bHQge1xuICAgIGdyb3VwOiB7a2V5OiBzdHJpbmd9O1xuICAgIHF1ZXJ5OiBzdHJpbmc7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJldHVyblN0cmluZ0FycmF5QnlJRChhcnJheTogeyBpZDogc3RyaW5nIHwgbnVtYmVyLCBbdmFsdWU6IHN0cmluZ106IGFueSB9W10pIHtcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKChyZXN1bHQsIGl0ZW0pID0+IHtcbiAgICAgICAgcmVzdWx0LnB1c2goaXRlbS5pZC50b1N0cmluZygpKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSwgW10pXG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZpbHRlclJlbW92YWxzKHJlbW92YWxzOiBzdHJpbmdbXSwgbGlzdDogQXV0b2NvbXBsZXRlSXRlbVtdKSB7XG4gICAgcmV0dXJuIGxpc3QuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgIHJldHVybiByZW1vdmFscy5pbmRleE9mKGl0ZW0uaWQudG9TdHJpbmcoKSkgPD0gLTE7XG4gICAgfSk7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIElzTW9iaWxlT3JUYWJsZXQoKSB7XG4gICAgbGV0IGlzTW9iaWxlID0gZmFsc2U7XG4gICAgaWYgKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcGFkfGlyaXN8a2luZGxlfEFuZHJvaWR8U2lsa3xsZ2UgfG1hZW1vfG1pZHB8bW1wfG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIChjZXxwaG9uZSl8eGRhfHhpaW5vL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuICAgICAgICB8fCAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQuc3Vic3RyKDAsIDQpKSkge1xuICAgICAgICBpc01vYmlsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTW9iaWxlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOb3RVc2VkS2V5KGNvZGU6IHN0cmluZykge1xuICAgIHJldHVybiB0eXBlb2YgVXNlZENvZGVMaXN0W2NvZGVdID09PSAndW5kZWZpbmVkJztcbn1cbiIsImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbnB1dCxcbiAgICBPbkNoYW5nZXMsXG4gICAgT25EZXN0cm95LFxuICAgIE9uSW5pdCxcbiAgICBPdXRwdXQsXG4gICAgU2ltcGxlQ2hhbmdlcyxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SXNNb2JpbGVPclRhYmxldH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tuZ0Ryb3Bkb3duXSdcbn0pXG5leHBvcnQgY2xhc3MgTmdEcm9wZG93bkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIEBJbnB1dCgpIHB1YmxpYyBsaXN0OiBhbnlbXSA9IFtdO1xuICAgIEBJbnB1dCgpIHB1YmxpYyBhY3RpdmU6IGFueSA9IG51bGw7XG4gICAgQElucHV0KCkgcHVibGljIHBhcmVudERldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiA9IG51bGw7XG5cbiAgICBASW5wdXQoKSBwdWJsaWMgaW5wdXQ6IEhUTUxFbGVtZW50ID0gbnVsbDtcbiAgICBASW5wdXQoKSBwdWJsaWMgZWxlbWVudDogRWxlbWVudCA9IG51bGw7XG5cbiAgICBASW5wdXQoKSBwdWJsaWMga2V5OiBzdHJpbmcgPSAnJztcbiAgICBASW5wdXQoKSBwdWJsaWMgY29tcGxldGlvbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBAT3V0cHV0KCkgcHVibGljIGhvdmVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICAgIEBPdXRwdXQoKSBwdWJsaWMgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gICAgQE91dHB1dCgpIHB1YmxpYyBjbG9zZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBfb3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIF9saXN0OiB7IGFjdGl2ZTogYm9vbGVhbiwgW3ZhbHVlOiBzdHJpbmddOiBhbnkgfVtdID0gW107XG4gICAgX2NsYXNzOiBzdHJpbmcgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfZXJlZjogRWxlbWVudFJlZikge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuX2NsYXNzID0gYGRyLWl0ZW0tJHt0aGlzLmtleX0tYDtcblxuICAgICAgICBpZiAoIUlzTW9iaWxlT3JUYWJsZXQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZXJlZi5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMubW91c2VvdmVyTGlzdGVuZXJCaW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5QcmVwYXJlTGlzdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAodHlwZW9mIGNoYW5nZXNbJ2FjdGl2ZSddICE9PSAndW5kZWZpbmVkJyAmJiAhY2hhbmdlc1snYWN0aXZlJ10uZmlyc3RDaGFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuUHJlcGFyZUxpc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNoYW5nZXNbJ2xpc3QnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdCA9IGNoYW5nZXNbJ2xpc3QnXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5QcmVwYXJlTGlzdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBrZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuY29kZSkge1xuICAgICAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgICAgICB0aGlzLk9wZW4oKTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGhpcy5TZXRBY3RpdmUodGhpcy5GaW5kQWN0aXZlKCkgKyAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLkRyb3Bkb3duRm9jdXNBcmVhRG93bigpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgICAgIHRoaXMuT3BlbigpO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLlNldEFjdGl2ZSh0aGlzLkZpbmRBY3RpdmUoKSAtIDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuRHJvcGRvd25Gb2N1c0FyZWFVcCgpO1xuXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgICAgICAgICB0aGlzLkVtaXRTZWxlY3RlZCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuQ2xvc2UobnVsbCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5SZWZFeGlzdHMoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0LmJsdXIoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlKG51bGwsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuUmVmRXhpc3RzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgICAgICAgICAgaWYgKCFldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkVtaXRTZWxlY3RlZCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuQ2xvc2UobnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgT25Nb3VzZU92ZXIoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgLy8gTW91c2UgZGlkbid0IGFjdHVhbGx5IG1vdmUsIHNvIG5vIGxvZ2ljIG5lZWRlZC5cbiAgICAgICAgaWYgKGV2ZW50Lm1vdmVtZW50WCA9PSAwICYmIGV2ZW50Lm1vdmVtZW50WSA9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZWw6IGFueSA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50O1xuICAgICAgICBpZiAoZWwuaWQubGVuZ3RoID4gMCAmJiBlbC5pZC5pbmNsdWRlcyh0aGlzLl9jbGFzcykpIHtcbiAgICAgICAgICAgIHRoaXMuU2V0QWN0aXZlKE51bWJlcihlbC5pZC5zbGljZSh0aGlzLl9jbGFzcy5sZW5ndGgsIGVsLmlkLmxlbmd0aCkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgRW1pdFNlbGVjdGVkKCkge1xuICAgICAgICBpZiAodGhpcy5GaW5kQWN0aXZlKCkgPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZC5lbWl0KHRoaXMuX2xpc3RbdGhpcy5GaW5kQWN0aXZlKCldLmtleSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIERyb3Bkb3duRm9jdXNBcmVhRG93bigpIHtcbiAgICAgICAgbGV0IHNjcm9sbCA9IHRoaXMuX2VyZWYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgKyB0aGlzLl9lcmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKCh0aGlzLkdldEVsZW1lbnQodGhpcy5GaW5kQWN0aXZlKCkpLm9mZnNldFRvcCArIHRoaXMuR2V0RWxlbWVudCh0aGlzLkZpbmRBY3RpdmUoKSkub2Zmc2V0SGVpZ2h0KSA+IHNjcm9sbCkge1xuICAgICAgICAgICAgdGhpcy5fZXJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9IHRoaXMuR2V0RWxlbWVudCh0aGlzLkZpbmRBY3RpdmUoKSkub2Zmc2V0VG9wIC0gKHRoaXMuX2VyZWYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgLSB0aGlzLkdldEVsZW1lbnQodGhpcy5GaW5kQWN0aXZlKCkpLm9mZnNldEhlaWdodClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgRHJvcGRvd25Gb2N1c0FyZWFVcCgpIHtcbiAgICAgICAgbGV0IHNjcm9sbCA9IHRoaXMuX2VyZWYubmF0aXZlRWxlbWVudC5zY3JvbGxUb3A7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGhpcy5HZXRFbGVtZW50KHRoaXMuRmluZEFjdGl2ZSgpKS5vZmZzZXRUb3AgPCBzY3JvbGwgJiYgc2Nyb2xsID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fZXJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9IHRoaXMuR2V0RWxlbWVudCh0aGlzLkZpbmRBY3RpdmUoKSkub2Zmc2V0VG9wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0vL1xuICAgIC8vICEgQmluZGluZ3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS8vXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIEBIb3N0QmluZGluZygnY2xhc3Mub3BlbicpXG4gICAgZ2V0IG9wZW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZW47XG4gICAgfVxuXG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS8vXG4gICAgLy8gISBMaXN0ZW5lcnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6Y2xpY2snLCBbJyRldmVudCddKVxuICAgIENsb3NlKGV2ZW50LCBmb3JjZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGlmICghdGhpcy5fb3Blbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW1pdCBOVUxMIHNvIGxpc3RlbmluZyBjb21wb25lbnRzIGtub3cgd2hhdCB0byBkby5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5SZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHRoaXMuQ2xlYXJBY3RpdmUoKTtcbiAgICAgICAgICAgIHRoaXMuaG92ZXIuZW1pdChudWxsKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkLmVtaXQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZm9yY2UpIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHRoaXMuX29wZW4gJiYgKCF0aGlzLmVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkpKSB7XG4gICAgICAgICAgICBjbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGlucHV0S2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICB0aGlzLmtleURvd24oZXZlbnQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5wdXRLZXlkb3duQmluZCA9IHRoaXMuaW5wdXRLZXlkb3duLmJpbmQodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgZG9jdW1lbnRLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIHRoaXMua2V5RG93bihldmVudCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkb2N1bWVudEtleWRvd25CaW5kID0gdGhpcy5kb2N1bWVudEtleWRvd24uYmluZCh0aGlzKTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBtb3VzZW92ZXJMaXN0ZW5lcihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICB0aGlzLk9uTW91c2VPdmVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1vdXNlb3Zlckxpc3RlbmVyQmluZCA9IHRoaXMubW91c2VvdmVyTGlzdGVuZXIuYmluZCh0aGlzKTtcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly9cbiAgICAvLyAhIFV0aWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0vL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBSZWdpc3Rlckxpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKHRoaXMuUmVmRXhpc3RzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaW5wdXRLZXlkb3duQmluZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuY29tcGxldGlvbikge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuZG9jdW1lbnRLZXlkb3duQmluZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFJlbW92ZUxpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKHRoaXMuUmVmRXhpc3RzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaW5wdXRLZXlkb3duQmluZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuY29tcGxldGlvbikge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuZG9jdW1lbnRLZXlkb3duQmluZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUlzTW9iaWxlT3JUYWJsZXQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZXJlZi5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMubW91c2VvdmVyTGlzdGVuZXJCaW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgT3BlbigpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX29wZW4gJiYgIXRoaXMuX2VyZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWluaXRpYWwtZW1wdHknKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuUmVnaXN0ZXJMaXN0ZW5lcnMoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX29wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuUHJlcGFyZUxpc3QoKTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuRmluZEFjdGl2ZSgpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wID0gdGhpcy5HZXRFbGVtZW50KHRoaXMuRmluZEFjdGl2ZSgpKS5vZmZzZXRIZWlnaHQgKiB0aGlzLkZpbmRBY3RpdmUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudERldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBSZWZFeGlzdHMoKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5pbnB1dCAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBGaW5kQWN0aXZlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0LnJlZHVjZSgocmVzdWx0LCBpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0uYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaW5kZXg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sIC0xKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFNldEFjdGl2ZShpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGlmIChpbmRleCA+IHRoaXMuX2xpc3QubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHJldHVybjtcblxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuQ2xlYXJBY3RpdmUoKTtcblxuICAgICAgICB0aGlzLl9saXN0W2luZGV4XS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmhvdmVyLmVtaXQodGhpcy5fbGlzdFtpbmRleF0ua2V5KTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLkdldEVsZW1lbnQoaW5kZXgpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgR2V0RWxlbWVudChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lcmVmLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5baW5kZXhdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgQ2xlYXJBY3RpdmUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2xpc3QuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGl0ZW0uYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5HZXRFbGVtZW50KGluZGV4KS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBQcmVwYXJlTGlzdCgpIHtcbiAgICAgICAgdGhpcy5fbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMubGlzdCkubWFwKChrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5BY3RpdmVJdGVtKGtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLlByZXBhcmVDaGlsZHJlbkxpc3QoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIEFjdGl2ZUl0ZW0oaXRlbTogYW55KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZSAhPT0gbnVsbCAmJiBpdGVtID09PSB0aGlzLmFjdGl2ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIERldGVybWluZUFjdGl2ZUNsYXNzKCkge1xuICAgICAgICB0aGlzLl9saXN0LmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuR2V0RWxlbWVudChpbmRleCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuR2V0RWxlbWVudChpbmRleCkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICBpZiAoaXRlbS5hY3RpdmUpXG4gICAgICAgICAgICAgICAgdGhpcy5HZXRFbGVtZW50KGluZGV4KS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgfSlcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgUHJlcGFyZUNoaWxkcmVuTGlzdCgpIHtcbiAgICAgICAgY29uc3QgbGlzdCA9IHRoaXMuX2VyZWYubmF0aXZlRWxlbWVudC5jaGlsZHJlbjtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxpc3RbaV0uaWQgPSB0aGlzLl9jbGFzcyArIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5EZXRlcm1pbmVBY3RpdmVDbGFzcygpO1xuXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgRGVSZWZlcmVuY2Uob2JqZWN0OiB7IGFjdGl2ZTogYm9vbGVhbiwgW3ZhbHVlOiBzdHJpbmddOiBhbnkgfSkge1xuICAgICAgICBjb25zdCB7aXRlbX0gPSBvYmplY3Q7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgey4uLml0ZW19KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLlJlbW92ZUxpc3RlbmVycygpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgTmdab25lLCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dG9jb21wbGV0ZUdyb3VwIH0gZnJvbSAnLi4vY2xhc3Nlcy9BdXRvY29tcGxldGVHcm91cCc7XG5pbXBvcnQge1xuICAgIEF1dG9jb21wbGV0ZUl0ZW0sXG4gICAgQ29tcGFyYWJsZUF1dG9Db21wbGV0ZVN0cmluZyxcbiAgICBTZWFyY2hhYmxlQXV0b0NvbXBsZXRlU3RyaW5nLFxuICAgIFN0cmlwcGVkQXV0b2NvbXBsZXRlR3JvdXBcbn0gZnJvbSAnLi4vY2xhc3Nlcy9BdXRvY29tcGxldGVJdGVtJztcbmltcG9ydCB7IE5nRHJvcGRvd25EaXJlY3RpdmUgfSBmcm9tICcuLi9kcm9wZG93bi9uZy1kcm9wZG93bi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR3JvdXBOb1Jlc3VsdCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZy1jb21wbGV0ZXInLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgI2VsZW1lbnQgY2xhc3M9XCJuZy1hdXRvY29tcGxldGUtZHJvcGRvd25cIlxuICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnb3Blbic6IGRyb3Bkb3duLl9vcGVuLCAnaXMtbG9hZGluZyc6IF9ET00uaXNMb2FkaW5nLCAnaXMtYXN5bmMnOiBncm91cC5hc3luYyAhPT0gbnVsbH1cIj5cblxuICAgICAgICAgICAgPCEtLUdST1VQOiB7e2dyb3VwLmtleX19LS0+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuZy1hdXRvY29tcGxldGUtaW5wdXRzXCIgKGNsaWNrKT1cIlJlZ2lzdGVyQ2xpY2soKVwiXG4gICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnY29tcGxldGlvbi1vZmYnOiAhZ3JvdXAuY29tcGxldGlvbn1cIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm5nLWF1dG9jb21wbGV0ZS1wbGFjZWhvbGRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJfRE9NLnBsYWNlaG9sZGVyXCI+XG4gICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZ3JvdXAucGxhY2Vob2xkZXJWYWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdUZW1wbGF0ZU91dGxldD1cImdyb3VwLnBsYWNlaG9sZGVyVmFsdWU7IGNvbnRleHQ6IHskaW1wbGljaXQ6IF9ET00ucGxhY2Vob2xkZXJ9XCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cIiFncm91cC5wbGFjZWhvbGRlclZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAge3tfRE9NLnBsYWNlaG9sZGVyLnRpdGxlfX1cbiAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxpbnB1dCAjaW5wdXQgdHlwZT1cInRleHRcIiBbcGxhY2Vob2xkZXJdPVwiZ3JvdXAucGxhY2Vob2xkZXJcIiBuYW1lPVwiY29tcGxldGVyXCIgW25nTW9kZWxdPVwiX2NvbXBsZXRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cIl9jaGFuZ2UubmV4dCgkZXZlbnQpO1wiXG4gICAgICAgICAgICAgICAgICAgICAgIFt2YWx1ZV09XCJfY29tcGxldGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgW3RhYkluZGV4XT1cIl9kaXNhYmxlZCA/IC0xIDogMFwiXG4gICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cIm5ldy1wYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgICAgIChmb2N1cyk9XCJPcGVuRHJvcGRvd24oKVwiIGNsYXNzPVwibmctYXV0b2NvbXBsZXRlLWlucHV0XCI+XG5cbiAgICAgICAgICAgICAgICA8c3BhbiBbbmdDbGFzc109XCJ7J29wZW4nOiBkcm9wZG93bi5fb3Blbn1cIiBjbGFzcz1cIm5nLWF1dG9jb21wbGV0ZS1kcm9wZG93bi1pY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwiRHJvcGRvd25BcnJheSgpXCI+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuZy1kcm9wZG93blwiIG5nRHJvcGRvd24gW2xpc3RdPVwiX2l0ZW1zXCIgW2VsZW1lbnRdPVwiZWxlbWVudFwiIFtpbnB1dF09XCJpbnB1dFwiXG4gICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsnaXMtaW5pdGlhbC1lbXB0eSc6IF9ET00uZW1wdHl9XCJcbiAgICAgICAgICAgICAgICAgW2FjdGl2ZV09XCJfRE9NLnNlbGVjdGVkXCIgW2tleV09XCJncm91cC5rZXlcIlxuICAgICAgICAgICAgICAgICBbY29tcGxldGlvbl09XCJncm91cC5jb21wbGV0aW9uXCJcbiAgICAgICAgICAgICAgICAgW3BhcmVudERldGVjdG9yXT1cImNkXCJcbiAgICAgICAgICAgICAgICAgKGhvdmVyKT1cIk9uSG92ZXJEcm9wZG93bkl0ZW0oJGV2ZW50KVwiXG4gICAgICAgICAgICAgICAgIChzZWxlY3RlZCk9XCJTZWxlY3RJdGVtKCRldmVudClcIlxuICAgICAgICAgICAgICAgICAoY2xvc2VkKT1cIk9uSW5wdXRCbHVycmVkKClcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJfRE9NLm5vdEZvdW5kICYmIGdyb3VwLm5vUmVzdWx0c1wiIGNsYXNzPVwiZHJvcGRvd24taXRlbSBuby1yZXN1bHRzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJncm91cC5ub1Jlc3VsdHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdUZW1wbGF0ZU91dGxldD1cImdyb3VwLm5vUmVzdWx0czsgY29udGV4dDogeyRpbXBsaWNpdDogX2NvbXBsZXRlcn1cIj48L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgX2l0ZW1zIHwga2V5czsgbGV0IGkgPSBpbmRleFwiXG4gICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwiU2VsZWN0SXRlbShfaXRlbXNbaXRlbV0pXCIgW25nQ2xhc3NdPVwiX2l0ZW1zW2l0ZW1dLmNsYXNzTmFtZVwiPlxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiZ3JvdXAuZHJvcGRvd25WYWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJncm91cC5kcm9wZG93blZhbHVlOyBjb250ZXh0OiB7JGltcGxpY2l0OiBfaXRlbXNbaXRlbV0sIGhpZ2hsaWdodDogX2l0ZW1zW2l0ZW1dLnRpdGxlIHwgaGlnaGxpZ2h0Ol9oaWdobGlnaHR9XCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cIiFncm91cC5kcm9wZG93blZhbHVlXCIgW2lubmVySFRNTF09XCJfaXRlbXNbaXRlbV0udGl0bGUgfCBoaWdobGlnaHQ6X2hpZ2hsaWdodFwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PmAsXG4gICAgc3R5bGVzOiBbYFxuICAgICAgICAubmctYXV0b2NvbXBsZXRlLWlucHV0cyB7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cblxuICAgICAgICAubmctYXV0b2NvbXBsZXRlLWlucHV0cyBpbnB1dFt0eXBlPXRleHRdOjotbXMtY2xlYXIsXG4gICAgICAgIC5uZy1hdXRvY29tcGxldGUtaW5wdXRzIGlucHV0W3R5cGU9dGV4dF06Oi1tcy1yZXZlYWwge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIHdpZHRoOiAwO1xuICAgICAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLm5nLWF1dG9jb21wbGV0ZS1pbnB1dHMuY29tcGxldGlvbi1vZmYge1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLm5nLWF1dG9jb21wbGV0ZS1pbnB1dHMuY29tcGxldGlvbi1vZmYgaW5wdXQge1xuICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAubmctYXV0b2NvbXBsZXRlLXBsYWNlaG9sZGVyIHtcbiAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLm5nLWF1dG9jb21wbGV0ZS1kcm9wZG93bi1pY29uIHtcblxuICAgICAgICB9XG5cbiAgICAgICAgLm5nLWF1dG9jb21wbGV0ZS1kcm9wZG93biAubmctZHJvcGRvd24ge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5uZy1hdXRvY29tcGxldGUtZHJvcGRvd24gLm5nLWRyb3Bkb3duLmlzLWVtcHR5IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAubmctYXV0b2NvbXBsZXRlLWRyb3Bkb3duIC5uZy1kcm9wZG93bi5vcGVuIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB9XG4gICAgYF0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ29tcGxldGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBAVmlld0NoaWxkKE5nRHJvcGRvd25EaXJlY3RpdmUpIHB1YmxpYyBkcm9wZG93bjogTmdEcm9wZG93bkRpcmVjdGl2ZTtcblxuICAgIEBPdXRwdXQoKSBwdWJsaWMgY2xlYXJlZDogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgICBAT3V0cHV0KCkgcHVibGljIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8U3RyaXBwZWRBdXRvY29tcGxldGVHcm91cD4gPSBuZXcgRXZlbnRFbWl0dGVyPFN0cmlwcGVkQXV0b2NvbXBsZXRlR3JvdXA+KCk7XG4gICAgQE91dHB1dCgnbm8tcmVzdWx0JykgcHVibGljIG5vUmVzdWx0OiBFdmVudEVtaXR0ZXI8R3JvdXBOb1Jlc3VsdD4gPSBuZXcgRXZlbnRFbWl0dGVyPEdyb3VwTm9SZXN1bHQ+KCk7XG5cbiAgICBASW5wdXQoKSBwdWJsaWMgZ3JvdXA6IEF1dG9jb21wbGV0ZUdyb3VwID0gPEF1dG9jb21wbGV0ZUdyb3VwPnt9O1xuXG4gICAgX2NoYW5nZTogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuICAgIF9pdGVtczogeyBbdmFsdWU6IHN0cmluZ106IEF1dG9jb21wbGV0ZUl0ZW0gfSA9IHt9O1xuICAgIF9jb21wbGV0ZXI6IHN0cmluZyA9ICcnO1xuICAgIF9oaWdobGlnaHQ6IHN0cmluZyA9ICcnO1xuICAgIF9kaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgX0RPTSA9IHtcbiAgICAgICAgbm90Rm91bmQ6IDxib29sZWFuPmZhbHNlLFxuICAgICAgICBlbXB0eTogPGJvb2xlYW4+ZmFsc2UsXG4gICAgICAgIHBsYWNlaG9sZGVyOiA8QXV0b2NvbXBsZXRlSXRlbT5udWxsLFxuICAgICAgICBzZWxlY3RlZDogPHN0cmluZz4nJyxcbiAgICAgICAgaXNMb2FkaW5nOiA8Ym9vbGVhbj5mYWxzZVxuXG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3pvbmU6IE5nWm9uZSwgcHVibGljIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2UucGlwZShcbiAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWUoMzAwKSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKCh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwLmFzeW5jICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5SdW5Bc3luY0Z1bmN0aW9uKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Pbk1vZGVsQ2hhbmdlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLlNldEl0ZW1zKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT25seSB1c2VkIHdoZW4gY29tcGxldGlvbiBpcyBvZmYuXG4gICAgICovXG4gICAgUmVnaXN0ZXJDbGljaygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmdyb3VwLmNvbXBsZXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuU3dpdGNoRHJvcGRvd25TdGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBEcm9wZG93bkFycmF5KCkge1xuICAgICAgICBpZiAodGhpcy5ncm91cC5jb21wbGV0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLlN3aXRjaERyb3Bkb3duU3RhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgU3dpdGNoRHJvcGRvd25TdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24uX29wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuQ2xvc2VEcm9wZG93bigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLk9wZW5Ecm9wZG93bigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgQ2xvc2VEcm9wZG93bigpIHtcbiAgICAgICAgdGhpcy5kcm9wZG93bi5fb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fRE9NLnBsYWNlaG9sZGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIE9wZW5Ecm9wZG93bigpIHtcbiAgICAgICAgdGhpcy5kcm9wZG93bi5PcGVuKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9ET00ucGxhY2Vob2xkZXIgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgU2V0SXRlbXMoKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gdGhpcy5ncm91cC52YWx1ZTtcbiAgICAgICAgdGhpcy5Jc0luaXRpYWxFbXB0eSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgU2VsZWN0SXRlbShpdGVtOiBBdXRvY29tcGxldGVJdGVtIHwgc3RyaW5nKSB7XG4gICAgICAgIGxldCBpOiBBdXRvY29tcGxldGVJdGVtO1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpID0gdGhpcy5faXRlbXNbaXRlbV07XG4gICAgICAgICAgICB0aGlzLl9ET00uc2VsZWN0ZWQgPSBpdGVtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaSA9IGl0ZW07XG4gICAgICAgICAgICB0aGlzLl9ET00uc2VsZWN0ZWQgPSBTZWFyY2hhYmxlQXV0b0NvbXBsZXRlU3RyaW5nKGl0ZW0udGl0bGUsIGl0ZW0uaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY29tcGxldGVyID0gaS50aXRsZTtcbiAgICAgICAgdGhpcy5faGlnaGxpZ2h0ID0gJyc7XG5cbiAgICAgICAgdGhpcy5kcm9wZG93bi5DbG9zZShudWxsLCB0cnVlKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZC5lbWl0KHtncm91cDoge2tleTogdGhpcy5ncm91cC5rZXl9LCBpdGVtOiBpfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBSdW5Bc3luY0Z1bmN0aW9uKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fY29tcGxldGVyID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2hpZ2hsaWdodCA9IHZhbHVlO1xuXG4gICAgICAgIHRoaXMuX0RPTS5zZWxlY3RlZCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5ncm91cC5Jbml0aWFsVmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMuQ2xlYXJNb2RlbCgpO1xuXG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duLkNsb3NlKCcnLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5sZW5ndGggPiB0aGlzLmdyb3VwLnNlYXJjaExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fRE9NLmlzTG9hZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IGF3YWl0IHRoaXMuZ3JvdXAuYXN5bmModmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5ncm91cC5TZXROZXdWYWx1ZSh2YWx1ZXMsIHRoaXMuZ3JvdXAua2V5cy50aXRsZUtleSk7XG5cbiAgICAgICAgICAgIHRoaXMuX0RPTS5pc0xvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5faXRlbXMgPSB0aGlzLmdyb3VwLnZhbHVlO1xuICAgICAgICAgICAgdGhpcy5FbXB0eVNlYXJjaCh0aGlzLl9pdGVtcywgdmFsdWUpO1xuXG4gICAgICAgICAgICAvLyBVc2VyIGhhcyB0eXBlZCBzb21ldGhpbmcgbm93LCByZXN1bHRzIGNvdWxkIGJlIHNob3duLiBXZSBuZWVkIHRvIHJlbW92ZSB0aGUgXCJpcy1pbml0aWFsLWVtcHR5XCIgY2xhc3MuXG4gICAgICAgICAgICB0aGlzLklzSW5pdGlhbEVtcHR5KCk7XG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duLk9wZW4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgT25Nb2RlbENoYW5nZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlciA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9oaWdobGlnaHQgPSB2YWx1ZTtcblxuICAgICAgICB0aGlzLl9ET00uc2VsZWN0ZWQgPSBudWxsO1xuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuQ2xlYXJNb2RlbCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmxlbmd0aCA+IHRoaXMuZ3JvdXAuc2VhcmNoTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLkNvbXBhcmVJdGVtc0FuZFNldCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIENsZWFyTW9kZWwoKSB7XG4gICAgICAgIHRoaXMuX0RPTS5zZWxlY3RlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX0RPTS5ub3RGb3VuZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuY2xlYXJlZC5lbWl0KHRoaXMuZ3JvdXAua2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIENvbXBhcmVJdGVtc0FuZFNldCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmdyb3VwLnZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoQ29tcGFyYWJsZUF1dG9Db21wbGV0ZVN0cmluZyhrZXkpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih2YWx1ZS50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgb2JqW2tleV0gPSB0aGlzLmdyb3VwLnZhbHVlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pdGVtcyA9IG9iajtcbiAgICAgICAgdGhpcy5FbXB0eVNlYXJjaCh0aGlzLl9pdGVtcywgdmFsdWUpO1xuXG4gICAgICAgIC8vIFVzZXIgaGFzIHR5cGVkIHNvbWV0aGluZyBub3csIHJlc3VsdHMgY291bGQgYmUgc2hvd24uIFdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBcImlzLWluaXRpYWwtZW1wdHlcIiBjbGFzcy5cbiAgICAgICAgdGhpcy5Jc0luaXRpYWxFbXB0eSgpO1xuICAgICAgICB0aGlzLmRyb3Bkb3duLk9wZW4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIE9uSW5wdXRCbHVycmVkKCkge1xuICAgICAgICBpZiAoIXRoaXMuSGFzQ2hvc2VuVmFsdWUoKSkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMZXQgY29tcG9uZW50IGtub3cgY29tcGxldGVyIGlucHV0IGhhcyBiZWVuIGNsZWFyZWQgLVxuICAgICAgICAgICAgICogdGhpcyBmdW5jdGlvbiBzaG93cyB0aGUgbGlzdCBhZ2FpbiwgYWxzbyByZXNldHMgY2hpbGRyZW4sIGlmIGNob3Nlbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5Pbk1vZGVsQ2hhbmdlKCcnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgT25Ib3ZlckRyb3Bkb3duSXRlbShpdGVtOiBBdXRvY29tcGxldGVJdGVtIHwgc3RyaW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuX0RPTS5wbGFjZWhvbGRlciA9IHRoaXMuX2l0ZW1zW2l0ZW1dO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX0RPTS5wbGFjZWhvbGRlciA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ET00ucGxhY2Vob2xkZXIgPSBpdGVtO1xuICAgIH1cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly9cbiAgICAvLyAhIFV0aWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0vL1xuXG4gICAgSXNJbml0aWFsRW1wdHkoKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9pdGVtcykubGVuZ3RoID09PSAwICYmIHRoaXMuX2NvbXBsZXRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX0RPTS5lbXB0eSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ET00uZW1wdHkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIEhhc0Nob3NlblZhbHVlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fRE9NLnNlbGVjdGVkICE9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgRW1wdHlTZWFyY2gob2JqOiBPYmplY3QsIHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fRE9NLm5vdEZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ET00ubm90Rm91bmQgPSB0cnVlO1xuICAgICAgICB0aGlzLm5vUmVzdWx0LmVtaXQoe2dyb3VwOiB7a2V5OiB0aGlzLmdyb3VwLmtleX0sIHF1ZXJ5OiBxdWVyeX0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgQ2xlYXJWYWx1ZSgpIHtcbiAgICAgICAgdGhpcy5fY29tcGxldGVyID0gJyc7XG4gICAgICAgIHRoaXMuX0RPTS5zZWxlY3RlZCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5ncm91cC5Jbml0aWFsVmFsdWUoKTtcbiAgICAgICAgdGhpcy5Jc0luaXRpYWxFbXB0eSgpO1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQuZW1pdCh7Z3JvdXA6IHtrZXk6IHRoaXMuZ3JvdXAua2V5fSwgaXRlbTogbnVsbH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIElucHV0LFxuICAgIE9uSW5pdCxcbiAgICBPdXRwdXQsXG4gICAgUXVlcnlMaXN0LFxuICAgIFNpbXBsZUNoYW5nZXMsXG4gICAgVGVtcGxhdGVSZWYsXG4gICAgVmlld0NoaWxkLFxuICAgIFZpZXdDaGlsZHJlblxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QXV0b2NvbXBsZXRlR3JvdXB9IGZyb20gJy4vY2xhc3Nlcy9BdXRvY29tcGxldGVHcm91cCc7XG5pbXBvcnQge1NlbGVjdGVkQXV0b2NvbXBsZXRlSXRlbX0gZnJvbSAnLi9jbGFzc2VzL3R5cGluZyc7XG5pbXBvcnQge0NvbXBsZXRlckNvbXBvbmVudH0gZnJvbSAnLi9jb21wbGV0ZXIvY29tcGxldGVyLmNvbXBvbmVudCc7XG5pbXBvcnQge0dyb3VwTm9SZXN1bHQsIFJldHVyblN0cmluZ0FycmF5QnlJRH0gZnJvbSAnLi91dGlscy91dGlscyc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25nLWF1dG8tY29tcGxldGUnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxkaXYgI2luaXQgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPjxzcGFuIGNsYXNzPVwiYWZ0ZXItdmlldy1pbml0XCI+PC9zcGFuPjwvZGl2PlxuICAgICAgICA8bmctY29tcGxldGVyIFtuZ0NsYXNzXT1cImNsYXNzZXNcIiAqbmdGb3I9XCJsZXQgaXRlbSBvZiBncm91cFwiIChjbGVhcmVkKT1cIklucHV0Q2xlYXJlZCgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAgICAgICAobm8tcmVzdWx0KT1cIk5vUmVzdWx0KCRldmVudClcIlxuICAgICAgICAgICAgICAgICAgICAgIChzZWxlY3RlZCk9XCJMaXN0ZW5Ub1NlbGVjdGVkKCRldmVudClcIlxuICAgICAgICAgICAgICAgICAgICAgIFtncm91cF09XCJpdGVtXCI+PC9uZy1jb21wbGV0ZXI+XG4gICAgYCxcbn0pXG5leHBvcnQgY2xhc3MgTmdBdXRvQ29tcGxldGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBWaWV3Q2hpbGRyZW4oQ29tcGxldGVyQ29tcG9uZW50KSBwdWJsaWMgY29tcGxldGVyczogUXVlcnlMaXN0PENvbXBsZXRlckNvbXBvbmVudD47XG4gICAgQFZpZXdDaGlsZCgnaW5pdCcpIHB1YmxpYyBpbml0OiBFbGVtZW50UmVmO1xuXG4gICAgQE91dHB1dCgpIHB1YmxpYyBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPFNlbGVjdGVkQXV0b2NvbXBsZXRlSXRlbT4gPSBuZXcgRXZlbnRFbWl0dGVyPFNlbGVjdGVkQXV0b2NvbXBsZXRlSXRlbT4oKTtcbiAgICBAT3V0cHV0KCduby1yZXN1bHQnKSBwdWJsaWMgbm9SZXN1bHQ6IEV2ZW50RW1pdHRlcjxHcm91cE5vUmVzdWx0PiA9IG5ldyBFdmVudEVtaXR0ZXI8R3JvdXBOb1Jlc3VsdD4oKTtcblxuICAgIEBJbnB1dCgpIHB1YmxpYyBncm91cDogQXV0b2NvbXBsZXRlR3JvdXBbXSA9IFtdO1xuICAgIEBJbnB1dCgpIHB1YmxpYyBrZXk6IHN0cmluZyA9ICcnO1xuICAgIEBJbnB1dCgpIHB1YmxpYyBjbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgX3ZpZXdIYXNCZWVuSW5pdDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIF92aWV3SW5pdFN1YmplY3Q6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl92aWV3SGFzQmVlbkluaXQpIHtcbiAgICAgICAgICAgIGxldCBlbCA9IHRoaXMuaW5pdC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZnRlci12aWV3LWluaXQnKTtcblxuICAgICAgICAgICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmlld0hhc0JlZW5Jbml0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3SW5pdFN1YmplY3QubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgTGlzdGVuVG9TZWxlY3RlZChzZWxlY3RlZDogU2VsZWN0ZWRBdXRvY29tcGxldGVJdGVtKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQuZW1pdChzZWxlY3RlZCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLlNldENoaWxkcmVuKHNlbGVjdGVkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIE5vUmVzdWx0KGdyb3VwOiBHcm91cE5vUmVzdWx0KSB7XG4gICAgICAgIHRoaXMubm9SZXN1bHQuZW1pdChncm91cCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBJbnB1dENsZWFyZWQoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5ncm91cC5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgICAgICAgaWYgKGdyb3VwLmtleSA9PT0ga2V5IHx8IGdyb3VwLnBhcmVudCA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5SZXNldElucHV0KGdyb3VwLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJdGVtcyBtYXkgaGF2ZSBjaGFuZ2VkLCBuZWVkIHRvIHRlIHJlLXNldCBsaXN0IGluIGNvbXBsZXRlciBjb21wb25lbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5UcmlnZ2VyQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBTZXRDaGlsZHJlbihzZWxlY3RlZDogU2VsZWN0ZWRBdXRvY29tcGxldGVJdGVtKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXG4gICAgICAgICAgICBpZiAoaXRlbS5wYXJlbnQgPT0gc2VsZWN0ZWQuZ3JvdXAua2V5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5SZXNldElucHV0KGl0ZW0ua2V5KTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkLml0ZW0gIT09IG51bGwgJiYgdHlwZW9mIHNlbGVjdGVkLml0ZW0uY2hpbGRyZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uU2V0TmV3VmFsdWUoc2VsZWN0ZWQuaXRlbS5jaGlsZHJlbiwgc2VsZWN0ZWQuZ3JvdXAua2V5cy50aXRsZUtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSXRlbXMgbWF5IGhhdmUgY2hhbmdlZCwgbmVlZCB0byB0ZSByZS1zZXQgbGlzdCBpbiBjb21wbGV0ZXIgY29tcG9uZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuVHJpZ2dlckNoYW5nZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgVHJpZ2dlckNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZXJzLmZvckVhY2goKGNvbXBsZXRlcikgPT4ge1xuICAgICAgICAgICAgY29tcGxldGVyLlNldEl0ZW1zKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ly9cbiAgICAvLyAhIFV0aWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0vL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBHZXRJbnB1dChrZXk6IHN0cmluZyk6IENvbXBsZXRlckNvbXBvbmVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlcnMucmVkdWNlKChyZXN1bHQsIGNvbXBsZXRlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlci5ncm91cC5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbXBsZXRlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSwgPENvbXBsZXRlckNvbXBvbmVudD57fSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBTdWJzY3JpYmVJbnB1dChrZXk6IHN0cmluZywgZjogKGNvbXBsZXRlcjogQ29tcGxldGVyQ29tcG9uZW50KSA9PiB2b2lkKSB7XG4gICAgICAgIGlmICh0aGlzLl92aWV3SGFzQmVlbkluaXQpIHtcbiAgICAgICAgICAgIGxldCBjb21wbGV0ZXIgPSB0aGlzLkdldElucHV0KGtleSk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZihjb21wbGV0ZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmlld0luaXRTdWJqZWN0LnN1YnNjcmliZSgoX2Jvb2wpID0+IHtcbiAgICAgICAgICAgIGxldCBjb21wbGV0ZXIgPSB0aGlzLkdldElucHV0KGtleSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBmKGNvbXBsZXRlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5fdmlld0luaXRTdWJqZWN0LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgUmVzZXRJbnB1dChrZXk6IHN0cmluZykge1xuICAgICAgICB0aGlzLlN1YnNjcmliZUlucHV0KFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgKGNvbXBsZXRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlci5DbGVhclZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBTZXRWYWx1ZXMoa2V5OiBzdHJpbmcsIHZhbHVlczogeyBpZD86IHN0cmluZyB8IG51bWJlcjsgW3ZhbHVlOiBzdHJpbmddOiBhbnkgfVtdKSB7XG4gICAgICAgIHRoaXMuU3Vic2NyaWJlSW5wdXQoXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAoY29tcGxldGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVyLmdyb3VwLlNldFZhbHVlcyh2YWx1ZXMpO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSXRlbXMgbWF5IGhhdmUgY2hhbmdlZCwgbmVlZCB0byB0ZSByZS1zZXQgbGlzdCBpbiBjb21wbGV0ZXIgY29tcG9uZW50cy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLlRyaWdnZXJDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFNldFRlbXBsYXRlKGtleTogc3RyaW5nLCB0eXBlOiAnbm9SZXN1bHRzJyB8ICdwbGFjZWhvbGRlclZhbHVlJyB8ICdkcm9wZG93blZhbHVlJywgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pIHtcbiAgICAgICAgdGhpcy5TdWJzY3JpYmVJbnB1dChcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIChjb21wbGV0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZXIuZ3JvdXBbdHlwZV0gPSB0ZW1wbGF0ZTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEl0ZW1zIG1heSBoYXZlIGNoYW5nZWQsIG5lZWQgdG8gdGUgcmUtc2V0IGxpc3QgaW4gY29tcGxldGVyIGNvbXBvbmVudHMuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGhpcy5UcmlnZ2VyQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBTZXRBc3luYyhrZXk6IHN0cmluZywgcHJvbWlzZTogKHN0cjogc3RyaW5nKSA9PiBQcm9taXNlPHsgaWQ6IHN0cmluZyB8IG51bWJlcjsgW3ZhbHVlOiBzdHJpbmddOiBhbnkgfVtdPikge1xuICAgICAgICB0aGlzLlN1YnNjcmliZUlucHV0KFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgKGNvbXBsZXRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlci5ncm91cC5hc3luYyA9IHByb21pc2U7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJdGVtcyBtYXkgaGF2ZSBjaGFuZ2VkLCBuZWVkIHRvIHRlIHJlLXNldCBsaXN0IGluIGNvbXBsZXRlciBjb21wb25lbnRzLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMuVHJpZ2dlckNoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgU2V0RW5hYmxlKGtleTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuU3Vic2NyaWJlSW5wdXQoXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAoY29tcGxldGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVyLl9kaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSXRlbXMgbWF5IGhhdmUgY2hhbmdlZCwgbmVlZCB0byB0ZSByZS1zZXQgbGlzdCBpbiBjb21wbGV0ZXIgY29tcG9uZW50cy5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLlRyaWdnZXJDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIFNldERpc2FibGUoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5TdWJzY3JpYmVJbnB1dChcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIChjb21wbGV0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZXIuX2Rpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEl0ZW1zIG1heSBoYXZlIGNoYW5nZWQsIG5lZWQgdG8gdGUgcmUtc2V0IGxpc3QgaW4gY29tcGxldGVyIGNvbXBvbmVudHMuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGhpcy5UcmlnZ2VyQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBTZWxlY3RJdGVtKGtleTogc3RyaW5nLCBpZDogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuU3Vic2NyaWJlSW5wdXQoXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAoY29tcGxldGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY29tcGxldGVyLl9pdGVtcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmID0gYF9pZF8ke1N0cmluZyhpZCl9YDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGMgPSBrZXkuc3Vic3RyaW5nKGtleS5pbmRleE9mKGYpLCBrZXkubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZiA9PT0gYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVyLlNlbGVjdEl0ZW0oY29tcGxldGVyLl9pdGVtc1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBSZW1vdmFibGVWYWx1ZXMoa2V5OiBzdHJpbmcsIGlkczogeyBpZDogc3RyaW5nIHwgbnVtYmVyLCBbdmFsdWU6IHN0cmluZ106IGFueSB9W10pIHtcbiAgICAgICAgdGhpcy5TdWJzY3JpYmVJbnB1dChcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIChjb21wbGV0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZXIuZ3JvdXAuUmVtb3ZhYmxlcyhSZXR1cm5TdHJpbmdBcnJheUJ5SUQoaWRzKSk7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJdGVtcyBtYXkgaGF2ZSBjaGFuZ2VkLCBuZWVkIHRvIHRlIHJlLXNldCBsaXN0IGluIGNvbXBsZXRlciBjb21wb25lbnRzLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMuVHJpZ2dlckNoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgUmVzZXRJbnB1dHMoKSB7XG4gICAgICAgIHRoaXMuZ3JvdXAuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5SZXNldElucHV0KGl0ZW0ua2V5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0vL1xuICAgIC8vICEgU3RhdGljICh1dGlscykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PS8vXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHN0YXRpYyBGaW5kQ29tcGxldGVyKGtleTogc3RyaW5nLCBsaXN0OiBRdWVyeUxpc3Q8TmdBdXRvQ29tcGxldGVDb21wb25lbnQ+KTogTmdBdXRvQ29tcGxldGVDb21wb25lbnQge1xuICAgICAgICBjb25zdCBjb21wbGV0ZXIgPSBsaXN0LmZpbHRlcigoY29tcGxldGVyOiBOZ0F1dG9Db21wbGV0ZUNvbXBvbmVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleSA9PT0gY29tcGxldGVyLmtleTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb21wbGV0ZXJbMF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGVyWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ2hpZ2hsaWdodCdcbn0pXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgdHJhbnNmb3JtKHRleHQ6IHN0cmluZywgc2VhcmNoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoc2VhcmNoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlN0cmlwKHRleHQpLnJlcGxhY2UobmV3IFJlZ0V4cChgJHt0aGlzLkVzY2FwZU1hdGNoKHNlYXJjaCl9YCwgJ2dpJyksIChtYXRjaDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImRyb3Bkb3duLWl0ZW0taGlnaGxpZ2h0XCI+JHttYXRjaH08L3NwYW4+YDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBFc2NhcGVNYXRjaChtYXRjaDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGVudGl0eU1hcCA9IHtcbiAgICAgICAgICAgICcmJzogJ1xcXFwmJyxcbiAgICAgICAgICAgICc8JzogJ1xcXFw8JyxcbiAgICAgICAgICAgICc+JzogJ1xcXFw+JyxcbiAgICAgICAgICAgICcvJzogJ1xcXFwvJyxcbiAgICAgICAgICAgICc9JzogJ1xcXFw9JyxcbiAgICAgICAgICAgICcrJzogJ1xcXFwrJyxcbiAgICAgICAgICAgICctJzogJ1xcXFwtJyxcbiAgICAgICAgICAgICcjJzogJ1xcXFwjJyxcbiAgICAgICAgICAgICchJzogJ1xcXFwhJyxcbiAgICAgICAgICAgICdAJzogJ1xcXFxAJyxcbiAgICAgICAgICAgICckJzogJ1xcXFwkJyxcbiAgICAgICAgICAgICclJzogJ1xcXFwlJyxcbiAgICAgICAgICAgICdeJzogJ1xcXFxeJyxcbiAgICAgICAgICAgICcqJzogJ1xcXFwqJyxcbiAgICAgICAgICAgICcoJzogJ1xcXFwoJyxcbiAgICAgICAgICAgICcpJzogJ1xcXFwpJyxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gU3RyaW5nKG1hdGNoKS5yZXBsYWNlKC9bJjw+XCInYD0rXFwvXS9nLCBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIGVudGl0eU1hcFtzXTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgU3RyaXAoc3RyX2luOiBTdHJpbmcgPSAnJykge1xuICAgICAgICByZXR1cm4gc3RyX2luLnJlcGxhY2UoLzxbXj5dKj4vZywgJycpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQFBpcGUoe1xuICAgIG5hbWU6ICdrZXlzJ1xufSlcbmV4cG9ydCBjbGFzcyBLZXlWYWx1ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHRyYW5zZm9ybSh2YWx1ZTogYW55LCBhcmdzPzogYW55KTogYW55IHtcbiAgICAgICAgbGV0IGtleXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0hpZ2hsaWdodFBpcGV9IGZyb20gJy4vaGlnaGxpZ2h0JztcbmltcG9ydCB7S2V5VmFsdWVQaXBlfSBmcm9tICcuL2tleS12YWx1ZSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW10sXG4gICAgZGVjbGFyYXRpb25zOiBbSGlnaGxpZ2h0UGlwZSwgS2V5VmFsdWVQaXBlXSxcbiAgICBleHBvcnRzOiBbSGlnaGxpZ2h0UGlwZSwgS2V5VmFsdWVQaXBlXSxcbn0pXG5leHBvcnQgY2xhc3MgUGlwZU1vZHVsZSB7XG5cbiAgICBzdGF0aWMgZm9yUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBQaXBlTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdBdXRvQ29tcGxldGVDb21wb25lbnR9IGZyb20gJy4vbmctYXV0by1jb21wbGV0ZS5jb21wb25lbnQnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0Zvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0NvbXBsZXRlckNvbXBvbmVudH0gZnJvbSAnLi9jb21wbGV0ZXIvY29tcGxldGVyLmNvbXBvbmVudCc7XG5pbXBvcnQge05nRHJvcGRvd25EaXJlY3RpdmV9IGZyb20gJy4vZHJvcGRvd24vbmctZHJvcGRvd24uZGlyZWN0aXZlJztcbmltcG9ydCB7UGlwZU1vZHVsZX0gZnJvbSAnLi9waXBlcy9waXBlcy5tb2R1bGUnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICBGb3Jtc01vZHVsZSxcbiAgICAgICAgUGlwZU1vZHVsZS5mb3JSb290KClcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgTmdBdXRvQ29tcGxldGVDb21wb25lbnQsXG4gICAgICAgIENvbXBsZXRlckNvbXBvbmVudCxcbiAgICBdLFxuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBOZ0F1dG9Db21wbGV0ZUNvbXBvbmVudCxcbiAgICAgICAgQ29tcGxldGVyQ29tcG9uZW50LFxuICAgICAgICBOZ0Ryb3Bkb3duRGlyZWN0aXZlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0F1dG9Db21wbGV0ZU1vZHVsZSB7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBWUksMEJBQVksS0FBYSxFQUFFLEVBQW1CLEVBQUUsU0FBaUIsRUFBRSxRQUFhO1FBQzVFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7S0FDNUI7SUFDTCx1QkFBQztDQUFBLElBQUE7Ozs7Ozs7O0FBS0QsU0FBZ0IsMkJBQTJCLENBQUMsS0FBdUQsRUFBRSxRQUFnQixFQUFFLFdBQWlDO0lBQWpDLDRCQUFBLEVBQUEsa0JBQWlDO0lBQ3BKLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDOztZQUN4QixDQUFDLEdBQUcsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFekQsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxXQUFXLEVBQUU7WUFDN0IsQ0FBQyxD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