import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, ChangeDetectorRef, Component, NgZone, ViewChild, ChangeDetectionStrategy, ViewChildren, Pipe, NgModule } from '@angular/core';
import { __awaiter } from 'tslib';
import { debounceTime } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutocompleteItem {
    /**
     * @param {?} title
     * @param {?} id
     * @param {?} className
     * @param {?} original
     */
    constructor(title, id, className, original) {
        this.title = title;
        this.id = id;
        this.className = className;
        this.original = original;
    }
}
/**
 *
 * @param {?} items
 * @param {?} titleKey
 * @param {?=} childrenKey
 * @return {?}
 */
function SearchableAutoCompleteItems(items, titleKey, childrenKey = null) {
    return items.reduce(function (r, i) {
        /** @type {?} */
        const t = SearchableAutoCompleteString(i[titleKey], i.id);
        if (typeof r[t] === 'undefined') {
            r[t] = TransformToAutocompleteItem(i, titleKey, childrenKey);
        }
        return r;
    }, {});
}
/**
 *
 * @param {?} key
 * @param {?} id
 * @return {?}
 */
function SearchableAutoCompleteString(key, id) {
    return `${key.replace(/ /g, '_')}_id_${String(id)}`;
}
/**
 *
 * @param {?} str
 * @return {?}
 */
function ComparableAutoCompleteString(str) {
    return str.replace(/_/g, ' ');
}
/**
 * object must have an ID
 * @param {?} object
 * @param {?} titleKey
 * @param {?=} childrenKey
 * @return {?}
 */
function TransformToAutocompleteItem(object, titleKey, childrenKey = null) {
    /** @type {?} */
    const item = new AutocompleteItem(object[titleKey], object.id, object.className, object);
    /**
     * if there are children, add these.
     */
    if (childrenKey !== null) {
        item.children = object[childrenKey];
    }
    return item;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutocompleteGroup {
    constructor() {
        this.async = null;
        this.removals = [];
    }
    /**
     *
     * @param {?} value
     * @param {?} titleKey
     * @return {?}
     */
    SetNewValue(value, titleKey) {
        /** @type {?} */
        const values = SearchableAutoCompleteItems(value, titleKey);
        this.SetCopy(values);
        /**
         *
         */
        this.value = this.FilterRemovals(this.removals, values);
    }
    /**
     *
     * @param {?} ids
     * @return {?}
     */
    Removables(ids) {
        this.removals = ids;
        /**
         *
         */
        this.value = this.FilterRemovals(this.removals, this._copy);
    }
    /**
     *
     * @return {?}
     */
    InitialValue() {
        this.value = this.FilterRemovals(this.removals, this.initialValue);
        /**
         *
         */
        this.SetCopy(this.initialValue);
    }
    /**
     *
     * @param {?} values
     * @return {?}
     */
    SetCopy(values) {
        this._copy = Object.assign([], values);
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    SetValues(value) {
        this.value = SearchableAutoCompleteItems(value, this.keys.titleKey, this.keys.childrenKey);
        /**
         *
         */
        this.initialValue = Object.assign({}, this.value);
        this.SetCopy(Object.assign({}, this.value));
    }
    /**
     *
     * @param {?} removals
     * @param {?} value
     * @return {?}
     */
    FilterRemovals(removals, value) {
        /** @type {?} */
        let filtered = Object.assign({}, value);
        /** @type {?} */
        let key;
        /** @type {?} */
        let keys = [];
        for (key in filtered) {
            if (filtered.hasOwnProperty(key)) {
                removals.forEach((id) => {
                    // Comparable string and ID
                    /** @type {?} */
                    let f = `_id_${String(id)}`;
                    /** @type {?} */
                    let c = key.substring(key.indexOf(f), key.length);
                    if (f === c) {
                        keys.push(key);
                    }
                });
            }
        }
        keys.forEach((k) => {
            delete filtered[k];
        });
        return filtered;
    }
}
/**
 *
 * @template T
 * @param {?} placeholder
 * @param {?} key
 * @param {?} value
 * @param {?} keys
 * @param {?=} parent
 * @param {?=} completion
 * @param {?=} searchLength
 * @return {?}
 */
function CreateNewAutocompleteGroup(placeholder, key, value, keys, parent = '', completion = true, searchLength = 2) {
    /** @type {?} */
    const group = new AutocompleteGroup();
    group.key = key;
    group.keys = keys;
    group.placeholder = placeholder;
    group.parent = parent;
    group.completion = completion;
    group.searchLength = searchLength;
    /**
     * Initial value needed, if we empty search box or want to clear it, it needs to be reset.
     * Setting copy, used if user wants to remove values (by id.). This _ list gets filtered.
     */
    group.SetValues(value);
    return group;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UsedCodeList = {
    ArrowDown: 40,
    ArrowUp: 38,
    Enter: 13,
    Escape: 27,
    Tab: 9,
    MetaLeft: 91,
    AltLeft: 18,
    ControlLeft: 17,
    ShiftLeft: 16,
    ArrowLeft: 37,
    ArrowRight: 39,
    MetaRight: 93,
    AltRight: 18
};
/**
 *
 * @param {?} array
 * @return {?}
 */
function ReturnStringArrayByID(array) {
    return array.reduce((result, item) => {
        result.push(item.id.toString());
        return result;
    }, []);
}
/**
 *
 * @param {?} removals
 * @param {?} list
 * @return {?}
 */
function FilterRemovals(removals, list) {
    return list.filter((item) => {
        return removals.indexOf(item.id.toString()) <= -1;
    });
}
/**
 *
 * @return {?}
 */
function IsMobileOrTablet() {
    /** @type {?} */
    let isMobile = false;
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
        isMobile = true;
    }
    return isMobile;
}
/**
 * @param {?} code
 * @return {?}
 */
function NotUsedKey(code) {
    return typeof UsedCodeList[code] === 'undefined';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgDropdownDirective {
    /**
     * @param {?} _eref
     */
    constructor(_eref) {
        this._eref = _eref;
        this.list = [];
        this.active = null;
        this.parentDetector = null;
        this.input = null;
        this.element = null;
        this.key = '';
        this.completion = true;
        this.hover = new EventEmitter();
        this.selected = new EventEmitter();
        this.closed = new EventEmitter();
        this._open = false;
        this._list = [];
        this._class = '';
        this.inputKeydownBind = this.inputKeydown.bind(this);
        this.documentKeydownBind = this.documentKeydown.bind(this);
        this.mouseoverListenerBind = this.mouseoverListener.bind(this);
    }
    /**
     *
     * @return {?}
     */
    ngOnInit() {
        this._class = `dr-item-${this.key}-`;
        if (!IsMobileOrTablet()) {
            this._eref.nativeElement.addEventListener('mouseover', this.mouseoverListenerBind);
        }
        /**
         *
         */
        this.PrepareList();
    }
    /**
     *
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (typeof changes['active'] !== 'undefined' && !changes['active'].firstChange) {
            this.PrepareList();
        }
        if (typeof changes['list'] !== 'undefined') {
            this.list = changes['list'].currentValue;
            /**
             *
             */
            this.PrepareList();
        }
    }
    /**
     *
     * @param {?} event
     * @return {?}
     */
    keyDown(event) {
        event.stopImmediatePropagation();
        event.stopPropagation();
        /**
         *
         */
        switch (event.code) {
            case 'ArrowDown':
                this.Open();
                /**
                 *
                 */
                this.SetActive(this.FindActive() + 1);
                this.DropdownFocusAreaDown();
                event.preventDefault();
                break;
            case 'ArrowUp':
                this.Open();
                /**
                 *
                 */
                this.SetActive(this.FindActive() - 1);
                this.DropdownFocusAreaUp();
                event.preventDefault();
                break;
            case 'Enter':
                this.EmitSelected();
                this.Close(null, true);
                if (this.RefExists()) {
                    this.input.blur();
                }
                event.preventDefault();
                break;
            case 'Escape':
                this.Close(null, true);
                if (this.RefExists()) {
                    this.input.blur();
                }
                event.preventDefault();
                break;
            case 'Tab':
                if (!event.shiftKey) {
                    this.EmitSelected();
                }
                this.Close(null, true);
                break;
            default:
                return;
        }
    }
    /**
     *
     * @param {?} event
     * @return {?}
     */
    OnMouseOver(event) {
        // Mouse didn't actually move, so no logic needed.
        if (event.movementX == 0 && event.movementY == 0) {
            return;
        }
        /**
         *
         * @type {?}
         */
        const el = event.target || event.srcElement;
        if (el.id.length > 0 && el.id.includes(this._class)) {
            this.SetActive(Number(el.id.slice(this._class.length, el.id.length)));
        }
    }
    /**
     *
     * @return {?}
     */
    EmitSelected() {
        if (this.FindActive() > -1) {
            this.selected.emit(this._list[this.FindActive()].key);
        }
    }
    /**
     *
     * @return {?}
     */
    DropdownFocusAreaDown() {
        /** @type {?} */
        let scroll = this._eref.nativeElement.offsetHeight + this._eref.nativeElement.scrollTop;
        /**
         *
         */
        if ((this.GetElement(this.FindActive()).offsetTop + this.GetElement(this.FindActive()).offsetHeight) > scroll) {
            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop - (this._eref.nativeElement.offsetHeight - this.GetElement(this.FindActive()).offsetHeight);
        }
    }
    /**
     *
     * @return {?}
     */
    DropdownFocusAreaUp() {
        /** @type {?} */
        let scroll = this._eref.nativeElement.scrollTop;
        /**
         *
         */
        if (this.GetElement(this.FindActive()).offsetTop < scroll && scroll > 0) {
            this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetTop;
        }
    }
    // =======================================================================//
    // ! Bindings                                                             //
    // =======================================================================//
    /**
     *
     * @return {?}
     */
    get opened() {
        return this._open;
    }
    // =======================================================================//
    // ! Listeners                                                            //
    // =======================================================================//
    /**
     *
     * @param {?} event
     * @param {?=} force
     * @return {?}
     */
    Close(event, force = false) {
        if (!this._open) {
            return;
        }
        /** @type {?} */
        const close = () => {
            this._open = false;
            /**
             * Emit NULL so listening components know what to do.
             */
            this.RemoveListeners();
            this.ClearActive();
            this.hover.emit(null);
            this.closed.emit();
        };
        if (force) {
            close();
            return;
        }
        if ((this._open && (!this.element.contains(event.target)))) {
            close();
        }
    }
    /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    inputKeydown(event) {
        this.keyDown(event);
    }
    /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    documentKeydown(event) {
        this.keyDown(event);
    }
    /**
     *
     * @private
     * @param {?} event
     * @return {?}
     */
    mouseoverListener(event) {
        this.OnMouseOver(event);
    }
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @return {?}
     */
    RegisterListeners() {
        if (this.RefExists()) {
            this.input.addEventListener('keydown', this.inputKeydownBind);
        }
        if (!this.completion) {
            document.addEventListener('keydown', this.documentKeydownBind);
        }
    }
    /**
     *
     * @return {?}
     */
    RemoveListeners() {
        if (this.RefExists()) {
            this.input.removeEventListener('keydown', this.inputKeydownBind);
        }
        if (!this.completion) {
            document.removeEventListener('keydown', this.documentKeydownBind);
        }
        if (!IsMobileOrTablet()) {
            this._eref.nativeElement.removeEventListener('mouseover', this.mouseoverListenerBind);
        }
    }
    /**
     *
     * @return {?}
     */
    Open() {
        setTimeout(() => {
            if (!this._open && !this._eref.nativeElement.classList.contains('is-initial-empty')) {
                this.RegisterListeners();
                this._open = true;
                this.PrepareList();
                /**
                 *
                 */
                if (this.FindActive() < 0) {
                    this._eref.nativeElement.scrollTop = 0;
                }
                else {
                    this._eref.nativeElement.scrollTop = this.GetElement(this.FindActive()).offsetHeight * this.FindActive();
                }
                this.parentDetector.detectChanges();
            }
        }, 0);
    }
    /**
     *
     * @return {?}
     */
    RefExists() {
        return typeof this.input !== 'undefined';
    }
    /**
     *
     * @return {?}
     */
    FindActive() {
        return this._list.reduce((result, item, index) => {
            if (item.active) {
                result = index;
            }
            return result;
        }, -1);
    }
    /**
     *
     * @param {?} index
     * @return {?}
     */
    SetActive(index) {
        if (index > this._list.length - 1 || index < 0)
            return;
        /**
         *
         */
        this.ClearActive();
        this._list[index].active = true;
        this.hover.emit(this._list[index].key);
        /**
         *
         */
        this.GetElement(index).classList.add('active');
    }
    /**
     *
     * @param {?} index
     * @return {?}
     */
    GetElement(index) {
        return this._eref.nativeElement.children[index];
    }
    /**
     *
     * @return {?}
     */
    ClearActive() {
        this._list.forEach((item, index) => {
            item.active = false;
            /**
             *
             */
            this.GetElement(index).classList.remove('active');
        });
    }
    /**
     *
     * @return {?}
     */
    PrepareList() {
        this._list = Object.keys(this.list).map((key) => {
            return {
                key,
                active: this.ActiveItem(key)
            };
        });
        /**
         *
         */
        this.PrepareChildrenList();
    }
    /**
     *
     * @param {?} item
     * @return {?}
     */
    ActiveItem(item) {
        return this.active !== null && item === this.active;
    }
    /**
     *
     * @return {?}
     */
    DetermineActiveClass() {
        this._list.forEach((item, index) => {
            if (typeof this.GetElement(index) === 'undefined') {
                return;
            }
            /**
             *
             */
            this.GetElement(index).classList.remove('active');
            if (item.active)
                this.GetElement(index).classList.add('active');
        });
    }
    /**
     *
     * @return {?}
     */
    PrepareChildrenList() {
        /** @type {?} */
        const list = this._eref.nativeElement.children;
        setTimeout(() => {
            for (let i = 0; i < list.length; i++) {
                list[i].id = this._class + i;
            }
        }, 0);
        /**
         *
         */
        this.DetermineActiveClass();
    }
    ;
    /**
     *
     * @param {?} object
     * @return {?}
     */
    DeReference(object) {
        const { item } = object;
        /**
         *
         */
        return Object.assign({}, Object.assign({}, item));
    }
    /**
     *
     * @return {?}
     */
    ngOnDestroy() {
        this.RemoveListeners();
    }
}
NgDropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngDropdown]'
            },] }
];
/** @nocollapse */
NgDropdownDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgDropdownDirective.propDecorators = {
    list: [{ type: Input }],
    active: [{ type: Input }],
    parentDetector: [{ type: Input }],
    input: [{ type: Input }],
    element: [{ type: Input }],
    key: [{ type: Input }],
    completion: [{ type: Input }],
    hover: [{ type: Output }],
    selected: [{ type: Output }],
    closed: [{ type: Output }],
    opened: [{ type: HostBinding, args: ['class.open',] }],
    Close: [{ type: HostListener, args: ['document:click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CompleterComponent {
    /**
     * @param {?} _zone
     * @param {?} cd
     */
    constructor(_zone, cd) {
        this._zone = _zone;
        this.cd = cd;
        this.cleared = new EventEmitter();
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = (/** @type {?} */ ({}));
        this._change = new Subject();
        this._items = {};
        this._completer = '';
        this._highlight = '';
        this._disabled = false;
        this._DOM = {
            notFound: (/** @type {?} */ (false)),
            empty: (/** @type {?} */ (false)),
            placeholder: (/** @type {?} */ (null)),
            selected: (/** @type {?} */ ('')),
            isLoading: (/** @type {?} */ (false))
        };
    }
    /**
     *
     * @return {?}
     */
    ngOnInit() {
        this._zone.runOutsideAngular(() => {
            this._change.pipe(debounceTime(300))
                .subscribe((value) => {
                this._zone.run(() => {
                    if (this.group.async !== null) {
                        this.RunAsyncFunction(value);
                    }
                    else {
                        this.OnModelChange(value);
                    }
                    this.cd.detectChanges();
                });
            });
        });
        this.SetItems();
    }
    /**
     * Only used when completion is off.
     * @return {?}
     */
    RegisterClick() {
        if (!this.group.completion) {
            this.SwitchDropdownState();
        }
    }
    /**
     *
     * @return {?}
     */
    DropdownArray() {
        if (this.group.completion) {
            this.SwitchDropdownState();
        }
    }
    /**
     *
     * @return {?}
     */
    SwitchDropdownState() {
        if (this.dropdown._open) {
            this.CloseDropdown();
            return;
        }
        /**
         *
         */
        this.OpenDropdown();
    }
    /**
     *
     * @return {?}
     */
    CloseDropdown() {
        this.dropdown._open = false;
        /**
         *
         */
        this._DOM.placeholder = null;
    }
    /**
     *
     * @return {?}
     */
    OpenDropdown() {
        this.dropdown.Open();
        /**
         *
         */
        this._DOM.placeholder = null;
    }
    /**
     *
     * @return {?}
     */
    SetItems() {
        this._items = this.group.value;
        this.IsInitialEmpty();
    }
    /**
     *
     * @param {?} item
     * @return {?}
     */
    SelectItem(item) {
        /** @type {?} */
        let i;
        if (typeof item === 'string') {
            i = this._items[item];
            this._DOM.selected = item;
        }
        else {
            i = item;
            this._DOM.selected = SearchableAutoCompleteString(item.title, item.id);
        }
        this._completer = i.title;
        this._highlight = '';
        this.dropdown.Close(null, true);
        this.selected.emit({ group: { key: this.group.key }, item: i });
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    RunAsyncFunction(value) {
        return __awaiter(this, void 0, void 0, function* () {
            this._completer = value;
            this._highlight = value;
            this._DOM.selected = null;
            if (value.length === 0) {
                this.group.InitialValue();
                this.ClearModel();
                this.dropdown.Close('', true);
            }
            else if (value.length > this.group.searchLength) {
                this._DOM.isLoading = true;
                /** @type {?} */
                const values = yield this.group.async(value);
                this.group.SetNewValue(values, this.group.keys.titleKey);
                this._DOM.isLoading = false;
                this._items = this.group.value;
                this.EmptySearch(this._items, value);
                // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
                this.IsInitialEmpty();
                this.dropdown.Open();
            }
            this.cd.detectChanges();
        });
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    OnModelChange(value) {
        this._completer = value;
        this._highlight = value;
        this._DOM.selected = null;
        if (value.length === 0) {
            this.ClearModel();
        }
        else if (value.length > this.group.searchLength) {
            this.CompareItemsAndSet(value);
        }
    }
    /**
     *
     * @return {?}
     */
    ClearModel() {
        this._DOM.selected = null;
        this._DOM.notFound = false;
        this.cleared.emit(this.group.key);
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    CompareItemsAndSet(value) {
        /** @type {?} */
        const obj = {};
        for (const key in this.group.value) {
            if (ComparableAutoCompleteString(key).toLowerCase().indexOf(value.toLowerCase()) > -1) {
                obj[key] = this.group.value[key];
            }
        }
        this._items = obj;
        this.EmptySearch(this._items, value);
        // User has typed something now, results could be shown. We need to remove the "is-initial-empty" class.
        this.IsInitialEmpty();
        this.dropdown.Open();
    }
    /**
     *
     * @return {?}
     */
    OnInputBlurred() {
        if (!this.HasChosenValue()) {
            /**
             * Let component know completer input has been cleared -
             * this function shows the list again, also resets children, if chosen.
             */
            this.OnModelChange('');
        }
    }
    /**
     *
     * @param {?} item
     * @return {?}
     */
    OnHoverDropdownItem(item) {
        if (typeof item === 'string') {
            this._DOM.placeholder = this._items[item];
            return;
        }
        if (item == null) {
            this._DOM.placeholder = null;
            return;
        }
        this._DOM.placeholder = item;
    }
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     * @return {?}
     */
    IsInitialEmpty() {
        if (Object.keys(this._items).length === 0 && this._completer.length === 0) {
            this._DOM.empty = true;
            return;
        }
        this._DOM.empty = false;
    }
    /**
     *
     * @return {?}
     */
    HasChosenValue() {
        return this._DOM.selected !== null;
    }
    /**
     *
     * @param {?} obj
     * @param {?} query
     * @return {?}
     */
    EmptySearch(obj, query) {
        if (Object.keys(obj).length > 0) {
            this._DOM.notFound = false;
            return;
        }
        this._DOM.notFound = true;
        this.noResult.emit({ group: { key: this.group.key }, query: query });
    }
    /**
     *
     * @return {?}
     */
    ClearValue() {
        this._completer = '';
        this._DOM.selected = null;
        this.group.InitialValue();
        this.IsInitialEmpty();
        /**
         *
         */
        this.selected.emit({ group: { key: this.group.key }, item: null });
    }
}
CompleterComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-completer',
                template: `
        <div #element class="ng-autocomplete-dropdown"
             [ngClass]="{'open': dropdown._open, 'is-loading': _DOM.isLoading, 'is-async': group.async !== null}">

            <!--GROUP: {{group.key}}-->

            <div class="ng-autocomplete-inputs" (click)="RegisterClick()"
                 [ngClass]="{'completion-off': !group.completion}">
                <span class="ng-autocomplete-placeholder"
                      *ngIf="_DOM.placeholder">
                  <ng-container *ngIf="group.placeholderValue">
                      <ng-template *ngTemplateOutlet="group.placeholderValue; context: {$implicit: _DOM.placeholder}"></ng-template>
                  </ng-container>
                  <ng-template [ngIf]="!group.placeholderValue">
                      {{_DOM.placeholder.title}}
                  </ng-template>
                </span>
                <input #input type="text" [placeholder]="group.placeholder" name="completer" [ngModel]="_completer"
                       (ngModelChange)="_change.next($event);"
                       [value]="_completer"
                       [tabIndex]="_disabled ? -1 : 0"
                       autocomplete="new-password"
                       (focus)="OpenDropdown()" class="ng-autocomplete-input">

                <span [ngClass]="{'open': dropdown._open}" class="ng-autocomplete-dropdown-icon"
                      (click)="DropdownArray()"></span>
            </div>

            <div class="ng-dropdown" ngDropdown [list]="_items" [element]="element" [input]="input"
                 [ngClass]="{'is-initial-empty': _DOM.empty}"
                 [active]="_DOM.selected" [key]="group.key"
                 [completion]="group.completion"
                 [parentDetector]="cd"
                 (hover)="OnHoverDropdownItem($event)"
                 (selected)="SelectItem($event)"
                 (closed)="OnInputBlurred()"
            >
                <div *ngIf="_DOM.notFound && group.noResults" class="dropdown-item no-results">
                    <ng-container *ngIf="group.noResults">
                        <ng-template *ngTemplateOutlet="group.noResults; context: {$implicit: _completer}"></ng-template>
                    </ng-container>
                </div>

                <div class="dropdown-item" *ngFor="let item of _items | keys; let i = index"
                     (click)="SelectItem(_items[item])" [ngClass]="_items[item].className">
                    <ng-container *ngIf="group.dropdownValue">
                        <ng-template
                            *ngTemplateOutlet="group.dropdownValue; context: {$implicit: _items[item], highlight: _items[item].title | highlight:_highlight}"></ng-template>
                    </ng-container>

                    <div *ngIf="!group.dropdownValue" [innerHTML]="_items[item].title | highlight:_highlight"></div>
                </div>
            </div>
        </div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
        .ng-autocomplete-inputs {
            position: relative;
        }

        .ng-autocomplete-inputs input[type=text]::-ms-clear,
        .ng-autocomplete-inputs input[type=text]::-ms-reveal {
            display: none;
            width: 0;
            height: 0;
        }

        .ng-autocomplete-inputs.completion-off {
            cursor: pointer;
        }

        .ng-autocomplete-inputs.completion-off input {
            pointer-events: none;
        }

        .ng-autocomplete-placeholder {
            pointer-events: none;
        }

        .ng-autocomplete-dropdown-icon {

        }

        .ng-autocomplete-dropdown .ng-dropdown {
            display: none;
        }

        .ng-autocomplete-dropdown .ng-dropdown.is-empty {
            display: none;
        }

        .ng-autocomplete-dropdown .ng-dropdown.open {
            display: block;
        }
    `]
            }] }
];
/** @nocollapse */
CompleterComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef }
];
CompleterComponent.propDecorators = {
    dropdown: [{ type: ViewChild, args: [NgDropdownDirective,] }],
    cleared: [{ type: Output }],
    selected: [{ type: Output }],
    noResult: [{ type: Output, args: ['no-result',] }],
    group: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgAutoCompleteComponent {
    /**
     * @param {?} cdr
     */
    constructor(cdr) {
        this.cdr = cdr;
        this.selected = new EventEmitter();
        this.noResult = new EventEmitter();
        this.group = [];
        this.key = '';
        this.classes = [];
        this._viewHasBeenInit = false;
        this._viewInitSubject = new Subject();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     *
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     *
     * @return {?}
     */
    ngAfterViewChecked() {
        if (!this._viewHasBeenInit) {
            /** @type {?} */
            let el = this.init.nativeElement.querySelector('.after-view-init');
            if (window.getComputedStyle(el).length > 0) {
                this._viewHasBeenInit = true;
                this._viewInitSubject.next(true);
            }
        }
    }
    /**
     *
     * @param {?} selected
     * @return {?}
     */
    ListenToSelected(selected) {
        this.selected.emit(selected);
        /**
         *
         */
        this.SetChildren(selected);
    }
    /**
     *
     * @param {?} group
     * @return {?}
     */
    NoResult(group) {
        this.noResult.emit(group);
    }
    /**
     *
     * @param {?} key
     * @return {?}
     */
    InputCleared(key) {
        this.group.forEach((group) => {
            if (group.key === key || group.parent === key) {
                this.ResetInput(group.key);
            }
        });
        /**
         * Items may have changed, need to te re-set list in completer components.
         */
        this.TriggerChange();
    }
    /**
     *
     * @param {?} selected
     * @return {?}
     */
    SetChildren(selected) {
        this.group.forEach((item) => {
            if (item.parent == selected.group.key) {
                this.ResetInput(item.key);
                /**
                 *
                 */
                if (selected.item !== null && typeof selected.item.children !== 'undefined') {
                    item.SetNewValue(selected.item.children, selected.group.keys.titleKey);
                }
            }
        });
        /**
         * Items may have changed, need to te re-set list in completer components.
         */
        this.TriggerChange();
    }
    /**
     *
     * @return {?}
     */
    TriggerChange() {
        this.completers.forEach((completer) => {
            completer.SetItems();
        });
    }
    // =======================================================================//
    // ! Utils                                                                //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @return {?}
     */
    GetInput(key) {
        return this.completers.reduce((result, completer) => {
            if (completer.group.key === key) {
                result = completer;
            }
            return result;
        }, (/** @type {?} */ ({})));
    }
    /**
     *
     * @param {?} key
     * @param {?} f
     * @return {?}
     */
    SubscribeInput(key, f) {
        if (this._viewHasBeenInit) {
            /** @type {?} */
            let completer = this.GetInput(key);
            /**
             *
             */
            f(completer);
            return;
        }
        this._viewInitSubject.subscribe((_bool) => {
            /** @type {?} */
            let completer = this.GetInput(key);
            setTimeout(() => {
                f(completer);
            });
            this._viewInitSubject.unsubscribe();
        });
    }
    /**
     *
     * @param {?} key
     * @return {?}
     */
    ResetInput(key) {
        this.SubscribeInput(key, (completer) => {
            completer.ClearValue();
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} values
     * @return {?}
     */
    SetValues(key, values) {
        this.SubscribeInput(key, (completer) => {
            completer.group.SetValues(values);
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    SetTemplate(key, type, template) {
        this.SubscribeInput(key, (completer) => {
            completer.group[type] = template;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} promise
     * @return {?}
     */
    SetAsync(key, promise) {
        this.SubscribeInput(key, (completer) => {
            completer.group.async = promise;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @param {?} key
     * @return {?}
     */
    SetEnable(key) {
        this.SubscribeInput(key, (completer) => {
            completer._disabled = false;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @param {?} key
     * @return {?}
     */
    SetDisable(key) {
        this.SubscribeInput(key, (completer) => {
            completer._disabled = true;
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} id
     * @return {?}
     */
    SelectItem(key, id) {
        this.SubscribeInput(key, (completer) => {
            Object.keys(completer._items).forEach((key) => {
                /** @type {?} */
                let f = `_id_${String(id)}`;
                /** @type {?} */
                let c = key.substring(key.indexOf(f), key.length);
                if (f === c) {
                    completer.SelectItem(completer._items[key]);
                }
            });
        });
    }
    /**
     *
     * @param {?} key
     * @param {?} ids
     * @return {?}
     */
    RemovableValues(key, ids) {
        this.SubscribeInput(key, (completer) => {
            completer.group.Removables(ReturnStringArrayByID(ids));
            /**
             * Items may have changed, need to te re-set list in completer components.
             */
            this.TriggerChange();
        });
    }
    /**
     *
     * @return {?}
     */
    ResetInputs() {
        this.group.forEach((item) => {
            this.ResetInput(item.key);
        });
    }
    // =======================================================================//
    // ! Static (utils)                                                       //
    // =======================================================================//
    /**
     *
     * @param {?} key
     * @param {?} list
     * @return {?}
     */
    static FindCompleter(key, list) {
        /** @type {?} */
        const completer = list.filter((completer) => {
            return key === completer.key;
        });
        if (typeof completer[0] !== 'undefined') {
            return completer[0];
        }
        return null;
    }
}
NgAutoCompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-auto-complete',
                template: `
        <div #init style="display: none;"><span class="after-view-init"></span></div>
        <ng-completer [ngClass]="classes" *ngFor="let item of group" (cleared)="InputCleared($event)"
                      (no-result)="NoResult($event)"
                      (selected)="ListenToSelected($event)"
                      [group]="item"></ng-completer>
    `
            }] }
];
/** @nocollapse */
NgAutoCompleteComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NgAutoCompleteComponent.propDecorators = {
    completers: [{ type: ViewChildren, args: [CompleterComponent,] }],
    init: [{ type: ViewChild, args: ['init',] }],
    selected: [{ type: Output }],
    noResult: [{ type: Output, args: ['no-result',] }],
    group: [{ type: Input }],
    key: [{ type: Input }],
    classes: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HighlightPipe {
    /**
     * @param {?} text
     * @param {?} search
     * @return {?}
     */
    transform(text, search) {
        if (search.length > 0) {
            return this.Strip(text).replace(new RegExp(`${this.EscapeMatch(search)}`, 'gi'), (match) => {
                return `<span class="dropdown-item-highlight">${match}</span>`;
            });
        }
        else {
            return text;
        }
    }
    /**
     * @param {?} match
     * @return {?}
     */
    EscapeMatch(match) {
        /** @type {?} */
        const entityMap = {
            '&': '\\&',
            '<': '\\<',
            '>': '\\>',
            '/': '\\/',
            '=': '\\=',
            '+': '\\+',
            '-': '\\-',
            '#': '\\#',
            '!': '\\!',
            '@': '\\@',
            '$': '\\$',
            '%': '\\%',
            '^': '\\^',
            '*': '\\*',
            '(': '\\(',
            ')': '\\)',
        };
        return String(match).replace(/[&<>"'`=+\/]/g, function (s) {
            return entityMap[s];
        });
    }
    /**
     * @param {?=} str_in
     * @return {?}
     */
    Strip(str_in = '') {
        return str_in.replace(/<[^>]*>/g, '');
    }
}
HighlightPipe.decorators = [
    { type: Pipe, args: [{
                name: 'highlight'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class KeyValuePipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        /** @type {?} */
        let keys = [];
        for (let key in value) {
            if (value.hasOwnProperty(key)) {
                keys.push(key);
            }
        }
        return keys;
    }
}
KeyValuePipe.decorators = [
    { type: Pipe, args: [{
                name: 'keys'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PipeModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: PipeModule,
            providers: [],
        };
    }
}
PipeModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [HighlightPipe, KeyValuePipe],
                exports: [HighlightPipe, KeyValuePipe],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgAutoCompleteModule {
}
NgAutoCompleteModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    PipeModule.forRoot()
                ],
                exports: [
                    NgAutoCompleteComponent,
                    CompleterComponent,
                ],
                declarations: [
                    NgAutoCompleteComponent,
                    CompleterComponent,
                    NgDropdownDirective
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgAutoCompleteComponent, NgAutoCompleteModule, PipeModule, SearchableAutoCompleteItems, SearchableAutoCompleteString, ComparableAutoCompleteString, TransformToAutocompleteItem, AutocompleteItem, CreateNewAutocompleteGroup, AutocompleteGroup, ReturnStringArrayByID, FilterRemovals, IsMobileOrTablet, NotUsedKey, CompleterComponent as ɵa, NgDropdownDirective as ɵb, HighlightPipe as ɵc, KeyValuePipe as ɵd };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,